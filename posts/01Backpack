<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width">
<meta name="theme-color" content="#222" media="(prefers-color-scheme: light)">
<meta name="theme-color" content="#222" media="(prefers-color-scheme: dark)"><meta name="generator" content="Hexo 7.3.0">
<link rel="preconnect" href="https://cdnjs.cloudflare.com" crossorigin>
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/mygo.jpg">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/mygo.jpg">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">

<link rel="stylesheet" href="/css/main.css">



<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" integrity="sha256-dABdfBfUoC8vJUBOwGVdm8L9qlMWaHTIfXt+7GnZCIo=" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.1.1/animate.min.css" integrity="sha256-PR7ttpcvz8qrF57fur/yAx1qXMFJeJFiA6pSzWi0OIE=" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/fancyapps-ui/5.0.31/fancybox/fancybox.css" integrity="sha256-gkQVf8UKZgQ0HyuxL/VnacadJ+D2Kox2TCEBuNQg5+w=" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/pace/1.2.4/themes/blue/pace-theme-center-simple.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/pace/1.2.4/pace.min.js" integrity="sha256-gqd7YTjg/BtfqWSwsJOvndl0Bxc8gFImLEkXQT8+qj0=" crossorigin="anonymous"></script>

<script class="next-config" data-name="main" type="application/json">{"hostname":"blog.kayleh.top","root":"/","images":"/images","scheme":"Gemini","darkmode":true,"version":"8.22.0","exturl":true,"sidebar":{"position":"left","width_expanded":320,"width_dual_column":240,"display":"post","padding":18,"offset":12},"hljswrap":true,"copycode":{"enable":false,"style":null},"fold":{"enable":false,"height":500},"bookmark":{"enable":false,"color":"#222","save":"auto"},"mediumzoom":true,"lazyload":true,"pangu":false,"comments":{"style":"tabs","active":"gitalk","storage":true,"lazyload":true,"nav":null,"activeClass":"gitalk"},"stickytabs":false,"motion":{"enable":true,"async":false,"duration":200,"transition":{"menu_item":"fadeInDown","post_block":"fadeIn","post_header":"fadeInDown","post_body":"fadeInDown","coll_header":"fadeInLeft","sidebar":"fadeInUp"}},"i18n":{"placeholder":"Searching...","empty":"We didn't find any results for the search: ${query}","hits_time":"${hits} results found in ${time} ms","hits":"${hits} results found"}}</script><script src="/js/config.js"></script>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7457165067653912"
     crossorigin="anonymous"></script>
    <meta name="description" content="背包问题（Knapsack problem）是一种组合优化的NP完全（NP-Complete，NPC）问题。问题可以描述为：给定一组物品，每种物品都有自己的重量和价格，在限定的总重量内，我们如何选择，才能使得物品的总价格最高。NPC问题是没有多项式时间复杂度的解法的，但是利用动态规划，我们可以以伪多项式时间复杂度求解背包问题。 背包问题有以下几种分类：  01背包问题 完全背包问题 多重背包问题">
<meta property="og:type" content="blog">
<meta property="og:title" content="01背包算法">
<meta property="og:url" content="https://blog.kayleh.top/posts/01Backpack">
<meta property="og:site_name" content="Kayleh&#39;s Blog">
<meta property="og:description" content="背包问题（Knapsack problem）是一种组合优化的NP完全（NP-Complete，NPC）问题。问题可以描述为：给定一组物品，每种物品都有自己的重量和价格，在限定的总重量内，我们如何选择，才能使得物品的总价格最高。NPC问题是没有多项式时间复杂度的解法的，但是利用动态规划，我们可以以伪多项式时间复杂度求解背包问题。 背包问题有以下几种分类：  01背包问题 完全背包问题 多重背包问题">
<meta property="og:locale" content="en_US">
<meta property="og:image" content="d:/Blog/source/_posts/01%E8%83%8C%E5%8C%85%E7%AE%97%E6%B3%95/4.1.png">
<meta property="article:published_time" content="2021-11-07T15:59:16.000Z">
<meta property="article:modified_time" content="2025-02-03T16:14:08.805Z">
<meta property="article:author" content="Kayleh">
<meta property="article:tag" content="algorithm">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="d:/Blog/source/_posts/01%E8%83%8C%E5%8C%85%E7%AE%97%E6%B3%95/4.1.png">


<link rel="canonical" href="https://blog.kayleh.top/posts/01Backpack">


<script class="next-config" data-name="page" type="application/json">{"sidebar":"","isHome":false,"isPost":true,"lang":"en","comments":true,"permalink":"https://blog.kayleh.top/posts/01Backpack","path":"posts/01Backpack","title":"01背包算法"}</script>

<script class="next-config" data-name="calendar" type="application/json">""</script>
<title>01背包算法 | Kayleh's Blog</title>
  




  <script>
    (function(c,l,a,r,i,t,y){
        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};
        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;
        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);
    })(window, document, "clarity", "script", "q44a4p85n0");
</script>




  <noscript>
    <link rel="stylesheet" href="/css/noscript.css">
  </noscript>
</head>

<body itemscope itemtype="http://schema.org/WebPage" class="use-motion">
  <div class="headband"></div>

  <main class="main">
    <div class="column">
      <header class="header" itemscope itemtype="http://schema.org/WPHeader"><div class="site-brand-container">
  <div class="site-nav-toggle">
    <div class="toggle" aria-label="Toggle navigation bar" role="button">
        <span class="toggle-line"></span>
        <span class="toggle-line"></span>
        <span class="toggle-line"></span>
    </div>
  </div>

  <div class="site-meta">

    <a href="/" class="brand" rel="start">
      <i class="logo-line"></i>
      <p class="site-title">Kayleh's Blog</p>
      <i class="logo-line"></i>
    </a>
  </div>

  <div class="site-nav-right">
    <div class="toggle popup-trigger" aria-label="Search" role="button">
        <i class="fa fa-search fa-fw fa-lg"></i>
    </div>
  </div>
</div>



<nav class="site-nav">
  <ul class="main-menu menu"><li class="menu-item menu-item-home"><a href="/" rel="section"><i class="fa fa-home fa-fw"></i>Home</a></li><li class="menu-item menu-item-archives"><a href="/archives/" rel="section"><i class="fa fa-archive fa-fw"></i>Archives<span class="badge">247</span></a></li><li class="menu-item menu-item-about"><a href="/about/" rel="section"><i class="fa fa-user fa-fw"></i>About</a></li><li class="menu-item menu-item-tags"><a href="/tags/" rel="section"><i class="fa fa-tags fa-fw"></i>Tags<span class="badge">34</span></a></li><li class="menu-item menu-item-friends"><a href="/friends" rel="section"><i class="fa fa-heartbeat fa-fw"></i>friends</a></li><li class="menu-item menu-item-sitemap"><a href="/rss.xml" rel="section"><i class="fa fa-sitemap fa-fw"></i>Sitemap</a></li>
      <li class="menu-item menu-item-search">
        <a role="button" class="popup-trigger"><i class="fa fa-search fa-fw"></i>Search
        </a>
      </li>
  </ul>
</nav>



  <div class="search-pop-overlay">
    <div class="popup search-popup">
      <div class="search-header">
        <span class="search-icon">
          <i class="fa fa-search"></i>
        </span>
        <div class="search-input-container">
          <input autocomplete="off" autocapitalize="off" maxlength="80"
                placeholder="Searching..." spellcheck="false"
                type="search" class="search-input">
        </div>
        <span class="popup-btn-close" role="button">
          <i class="fa fa-times-circle"></i>
        </span>
      </div>
      <div class="search-result-container">
        <div class="search-result-icon">
          <i class="fa fa-spinner fa-pulse fa-5x"></i>
        </div>
      </div>
    </div>
  </div>

</header>
        
  
  <aside class="sidebar">

    <div class="sidebar-inner sidebar-nav-active sidebar-toc-active">
      <ul class="sidebar-nav">
        <li class="sidebar-nav-toc">
          Table of Contents
        </li>
        <li class="sidebar-nav-overview">
          Overview
        </li>
      </ul>

      <div class="sidebar-panel-container">
        <!--noindex-->
        <div class="post-toc-wrap sidebar-panel">
            <div class="post-toc animated"><ol class="nav"><li class="nav-item nav-level-2"><a class="nav-link" href="#01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%EF%BC%9A"><span class="nav-number">1.</span> <span class="nav-text">01背包问题：</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%A7%A3%E9%A2%98%E6%AD%A5%E9%AA%A4"><span class="nav-number">1.1.</span> <span class="nav-text">动态规划解题步骤</span></a><ol class="nav-child"><li class="nav-item nav-level-4"><a class="nav-link" href="#%E4%B8%80%E3%80%81%E5%AE%9A%E4%B9%89dp%E6%95%B0%E7%BB%84"><span class="nav-number">1.1.1.</span> <span class="nav-text">一、定义dp数组</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#%E4%BA%8C%E3%80%81%E7%A1%AE%E5%AE%9A%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E6%96%B9%E7%A8%8B"><span class="nav-number">1.1.2.</span> <span class="nav-text">二、确定状态转移方程</span></a></li></ol></li></ol></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#2-%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85"><span class="nav-number"></span> <span class="nav-text">2. 完全背包</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#2-1-%E9%A2%98%E7%9B%AE"><span class="nav-number">1.</span> <span class="nav-text">2.1 题目</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#2-2-%E5%88%86%E6%9E%90%E4%B8%80"><span class="nav-number">2.</span> <span class="nav-text">2.2 分析一</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#2-3-%E5%88%86%E6%9E%90%E4%BA%8C"><span class="nav-number">3.</span> <span class="nav-text">2.3 分析二</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#2-4-%E5%88%86%E6%9E%90%E4%B8%89%E3%80%81%E8%BD%AC%E6%8D%A2%E6%88%9001%E8%83%8C%E5%8C%85"><span class="nav-number">4.</span> <span class="nav-text">2.4 分析三、转换成01背包</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#3-%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85"><span class="nav-number"></span> <span class="nav-text">3. 多重背包</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#3-1-%E9%A2%98%E7%9B%AE"><span class="nav-number">1.</span> <span class="nav-text">3.1 题目</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#3-2-%E5%88%86%E6%9E%90%E4%B8%80"><span class="nav-number">2.</span> <span class="nav-text">3.2 分析一</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#3-3-%E5%88%86%E6%9E%90%E4%BA%8C%E3%80%81%E8%BD%AC%E6%8D%A2%E6%88%9001%E8%83%8C%E5%8C%85"><span class="nav-number">3.</span> <span class="nav-text">3.3 分析二、转换成01背包</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#3-4-%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF"><span class="nav-number">4.</span> <span class="nav-text">3.4 代码模板</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#4-%E5%85%B6%E4%BB%96%E6%83%85%E5%BD%A2"><span class="nav-number"></span> <span class="nav-text">4. 其他情形</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#4-1-%E6%81%B0%E5%A5%BD%E8%A3%85%E6%BB%A1"><span class="nav-number">1.</span> <span class="nav-text">4.1 恰好装满</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#4-2-%E6%B1%82%E6%96%B9%E6%A1%88%E6%80%BB%E6%95%B0"><span class="nav-number">2.</span> <span class="nav-text">4.2 求方案总数</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#4-3-%E4%BA%8C%E7%BB%B4%E8%83%8C%E5%8C%85"><span class="nav-number">3.</span> <span class="nav-text">4.3 二维背包</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#4-4-%E6%B1%82%E6%9C%80%E4%BC%98%E6%96%B9%E6%A1%88"><span class="nav-number">4.</span> <span class="nav-text">4.4 求最优方案</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#5-LeetCode%E7%9B%B8%E5%85%B3%E9%A2%98%E7%9B%AE"><span class="nav-number"></span> <span class="nav-text">5. LeetCode相关题目</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#5-1-Partition-Equal-Subset-Sum%EF%BC%88%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86%EF%BC%89"><span class="nav-number">1.</span> <span class="nav-text">5.1 Partition Equal Subset Sum（分割等和子集）</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#5-2-Coin-Change%EF%BC%88%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2%EF%BC%89"><span class="nav-number">2.</span> <span class="nav-text">5.2 Coin Change（零钱兑换）</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#5-3-Target-Sum%EF%BC%88%E7%9B%AE%E6%A0%87%E5%92%8C%EF%BC%89"><span class="nav-number">3.</span> <span class="nav-text">5.3 Target Sum（目标和）</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#5-4-Ones-and-Zeros%EF%BC%88%E4%B8%80%E5%92%8C%E9%9B%B6%EF%BC%89"><span class="nav-number">4.</span> <span class="nav-text">5.4 Ones and Zeros（一和零）</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#6-%E6%80%BB%E7%BB%93"><span class="nav-number"></span> <span class="nav-text">6. 总结</span></a></div>
        </div>
        <!--/noindex-->

        <div class="site-overview-wrap sidebar-panel">
          <div class="site-author animated" itemprop="author" itemscope itemtype="http://schema.org/Person">
    <img class="site-author-image" itemprop="image" alt="Kayleh"
      src="/images/mygo.jpg">
  <p class="site-author-name" itemprop="name">Kayleh</p>
  <div class="site-description" itemprop="description"></div>
</div>
<div class="site-state-wrap animated">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
        <a href="/archives/">
          <span class="site-state-item-count">247</span>
          <span class="site-state-item-name">posts</span>
        </a>
      </div>
      <div class="site-state-item site-state-categories">
        <span class="site-state-item-count">5</span>
        <span class="site-state-item-name">categories</span>
      </div>
      <div class="site-state-item site-state-tags">
          <a href="/tags/">
        <span class="site-state-item-count">34</span>
        <span class="site-state-item-name">tags</span></a>
      </div>
  </nav>
</div>
  <div class="links-of-author animated">
      <span class="links-of-author-item">
        <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2theWxlaA==" title="GitHub → https:&#x2F;&#x2F;github.com&#x2F;kayleh"><i class="fab fa-github fa-fw"></i>GitHub</span>
      </span>
      <span class="links-of-author-item">
        <span class="exturl" data-url="bWFpbHRvOndlYnNpdGVAa2F5bGVoLnRvcA==" title="E-Mail → mailto:website@kayleh.top"><i class="fa fa-envelope fa-fw"></i>E-Mail</span>
      </span>
  </div>
  <div class="cc-license animated" itemprop="license">
    <span class="exturl cc-opacity" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzQuMC8="><img src="https://cdnjs.cloudflare.com/ajax/libs/creativecommons-vocabulary/2020.11.3/assets/license_badges/small/by_nc_sa.svg" alt="Creative Commons"></span>
  </div>

        </div>
      </div>
    </div>

    
  </aside>


    </div>

    <div class="main-inner post posts-expand">


  


<div class="post-block">
  
  

  <article itemscope itemtype="http://schema.org/Article" class="post-content" lang="en">
    <link itemprop="mainEntityOfPage" href="https://blog.kayleh.top/posts/01Backpack">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/mygo.jpg">
      <meta itemprop="name" content="Kayleh">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="Kayleh's Blog">
      <meta itemprop="description" content="">
    </span>

    <span hidden itemprop="post" itemscope itemtype="http://schema.org/CreativeWork">
      <meta itemprop="name" content="01背包算法 | Kayleh's Blog">
      <meta itemprop="description" content="">
    </span>
      <header class="post-header">
        <h1 class="post-title" itemprop="name headline">
          01背包算法<span class="exturl post-edit-link" data-url="aHR0cHM6Ly9naXRodWIuY29tL2theWxlaC9rYXlsZWguZ2l0aHViLmlvMi9lZGl0L21hc3Rlci9zb3VyY2UvX3Bvc3RzLzAx6IOM5YyF566X5rOVLm1k" title="Edit this post"><i class="fa fa-pen-nib"></i></span>
        </h1>

        <div class="post-meta-container">
          <div class="post-meta">
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-calendar"></i>
      </span>
      <span class="post-meta-item-text">Posted on</span>

      <time title="Created: 2021-11-07 23:59:16" itemprop="dateCreated datePublished" datetime="2021-11-07T23:59:16+08:00">2021-11-07</time>
    </span>
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-calendar-check"></i>
      </span>
      <span class="post-meta-item-text">Edited on</span>
      <time title="Modified: 2025-02-04 00:14:08" itemprop="dateModified" datetime="2025-02-04T00:14:08+08:00">2025-02-04</time>
    </span>

  
    <span class="post-meta-item" title="Views" id="busuanzi_container_page_pv">
      <span class="post-meta-item-icon">
        <i class="far fa-eye"></i>
      </span>
      <span class="post-meta-item-text">Views: </span>
      <span id="busuanzi_value_page_pv"></span>
    </span>
</div>

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody"><p>背包问题（Knapsack problem）是一种组合优化的NP完全（NP-Complete，NPC）问题。问题可以描述为：给定一组物品，每种物品都有自己的重量和价格，在限定的总重量内，我们如何选择，才能使得物品的总价格最高。NPC问题是没有多项式时间复杂度的解法的，但是利用动态规划，我们可以以伪多项式时间复杂度求解背包问题。</p>
<p>背包问题有以下几种分类：</p>
<ol>
<li>01背包问题</li>
<li>完全背包问题</li>
<li>多重背包问题</li>
</ol>
<h2 id="01背包问题："><a href="#01背包问题：" class="headerlink" title="01背包问题："></a>01背包问题：</h2><blockquote>
<p>一共有N件物品，第i（i从1开始）件物品的重量为w[i]，价值为v[i]。在总重量不超过背包承载上限W的情况下，能够装入背包的最大价值是多少？</p>
</blockquote>
<h3 id="动态规划解题步骤"><a href="#动态规划解题步骤" class="headerlink" title="动态规划解题步骤"></a>动态规划解题步骤</h3><h4 id="一、定义dp数组"><a href="#一、定义dp数组" class="headerlink" title="一、定义dp数组"></a>一、定义dp数组</h4><p>根据题意，可以得知dp数组的定义：dp[i][j]表示书包内物品的价值。其中变量为物品的重量和书包的限重</p>
<p>所以可以得出数组的定义：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] </span><br></pre></td></tr></table></figure>

<h4 id="二、确定状态转移方程"><a href="#二、确定状态转移方程" class="headerlink" title="二、确定状态转移方程"></a>二、确定状态转移方程</h4><p>将dp[0][0…W]初始化为0，表示将前0个物品（即没有物品）装入书包的最大价值为0。那么当 i &gt; 0 时<code>dp[i][j]</code>有两种情况：</p>
<ol>
<li>不装入第i件物品，即<code>dp[i−1][j]</code>；</li>
<li>装入第i件物品（前提是能装下），即<code>dp[i−1][j−w[i]] + v[i]</code>。</li>
</ol>
<p>根据动态规划的定义，在装入第i件物品后，书包内物品的最大价值等于装入第i-1件物品时的最大价值加上装入第i-1件物品后能装下的最大价值</p>
<blockquote>
<p>动态规划的核心思想<strong>避免重复计算</strong>在01背包问题中体现得淋漓尽致。第i件物品装入或者不装入而获得的最大价值完全可以由前面i-1件物品的最大价值决定，暴力枚举忽略了这个事实。</p>
</blockquote>
<p>即状态转移方程为</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = max(dp[i−<span class="number">1</span>][j], dp[i−<span class="number">1</span>][j−w[i]]+v[i]) <span class="comment">// j &gt;= w[i]</span></span><br></pre></td></tr></table></figure>

<p>由上述状态转移方程可知，<code>dp[i][j]</code>的值只与<code>dp[i-1][0,...,j-1]</code>有关，所以我们可以采用动态规划常用的方法（滚动数组）对空间进行优化（即去掉dp的第一维）。需要注意的是，为了防止上一层循环的<code>dp[0,...,j-1]</code>被覆盖，循环的时候 j 只能<strong>逆向枚举</strong>（空间优化前没有这个限制），伪代码为：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 01背包问题伪代码(空间优化版)</span><br><span class="line">dp[0,...,W] = 0</span><br><span class="line">for i = 1,...,N</span><br><span class="line">    for j = W,...,w[i] // 必须逆向枚举!!!</span><br><span class="line">        dp[j] = max(dp[j], dp[j−w[i]]+v[i])</span><br></pre></td></tr></table></figure>

<p>时间复杂度为O(NW), 空间复杂度为O(W)。由于W的值是W的位数的幂，所以这个时间复杂度是伪多项式时间。</p>
<h1 id="2-完全背包"><a href="#2-完全背包" class="headerlink" title="2. 完全背包"></a>2. 完全背包</h1><h2 id="2-1-题目"><a href="#2-1-题目" class="headerlink" title="2.1 题目"></a>2.1 题目</h2><p>完全背包（unbounded knapsack problem）与01背包不同就是每种物品可以有无限多个：一共有N种物品，每种物品有无限多个，第i（i从1开始）种物品的重量为w[i]，价值为v[i]。在总重量不超过背包承载上限W的情况下，能够装入背包的最大价值是多少？</p>
<h2 id="2-2-分析一"><a href="#2-2-分析一" class="headerlink" title="2.2 分析一"></a>2.2 分析一</h2><p>我们的目标和变量和01背包没有区别，所以我们可定义与01背包问题几乎完全相同的状态dp:</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j]表示将前i种物品装进限重为j的背包可以获得的最大价值, 0&lt;=i&lt;=N, 0&lt;=j&lt;=W</span><br></pre></td></tr></table></figure>



<p>初始状态也是一样的，我们将dp[0][0…W]初始化为0，表示将前0种物品（即没有物品）装入书包的最大价值为0。那么当 i &gt; 0 时<code>dp[i][j]</code>也有两种情况：</p>
<ol>
<li>不装入第i种物品，即<code>dp[i−1][j]</code>，同01背包；</li>
<li>装入第i种物品，此时和01背包不太一样，因为每种物品有无限个（但注意书包限重是有限的），所以此时不应该转移到<code>dp[i−1][j−w[i]]</code>而应该转移到<code>dp[i][j−w[i]]</code>，即装入第i种商品后还可以再继续装入第种商品。</li>
</ol>
<p>所以状态转移方程为</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = max(dp[i−1][j], dp[i][j−w[i]]+v[i]) // j &gt;= w[i]</span><br></pre></td></tr></table></figure>



<p>这个状态转移方程与01背包问题唯一不同就是max第二项不是dp[i-1]而是dp[i]。</p>
<p>和01背包问题类似，也可进行空间优化，优化后不同点在于这里的 j 只能<strong>正向枚举</strong>而01背包只能逆向枚举，因为这里的max第二项是<code>dp[i]</code>而01背包是<code>dp[i-1]</code>，即这里就是需要覆盖而01背包需要避免覆盖。所以伪代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 完全背包问题思路一伪代码(空间优化版)</span><br><span class="line">dp[0,...,W] = 0</span><br><span class="line">for i = 1,...,N</span><br><span class="line">    for j = w[i],...,W // 必须正向枚举!!!</span><br><span class="line">        dp[j] = max(dp[j], dp[j−w[i]]+v[i])</span><br></pre></td></tr></table></figure>

<p>由上述伪代码看出，01背包和完全背包问题此解法的空间优化版解法唯一不同就是前者的 j 只能逆向枚举而后者的 j 只能正向枚举，这是由二者的状态转移方程决定的。此解法时间复杂度为O(NW), 空间复杂度为O(W)。</p>
<h2 id="2-3-分析二"><a href="#2-3-分析二" class="headerlink" title="2.3 分析二"></a>2.3 分析二</h2><p>除了分析一的思路外，完全背包还有一种常见的思路，但是复杂度高一些。我们从装入第 i 种物品多少件出发，01背包只有两种情况即取0件和取1件，而这里是取0件、1件、2件…直到超过限重（k &gt; j&#x2F;w[i]），所以状态转移方程为：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># k为装入第i种物品的件数, k &lt;= j/w[i]</span><br><span class="line">dp[i][j] = max&#123;(dp[i-1][j − k*w[i]] + k*v[i]) for every k&#125;</span><br></pre></td></tr></table></figure>



<p>同理也可以进行空间优化，需要注意的是，这里max里面是<code>dp[i-1]</code>，和01背包一样，所以 j 必须<strong>逆向枚举</strong>，优化后伪代码为</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 完全背包问题思路二伪代码(空间优化版)</span><br><span class="line">dp[0,...,W] = 0</span><br><span class="line">for i = 1,...,N</span><br><span class="line">    for j = W,...,w[i] // 必须逆向枚举!!!</span><br><span class="line">        for k = [0, 1,..., j/w[i]]</span><br><span class="line">            dp[j] = max(dp[j], dp[j−k*w[i]]+k*v[i])</span><br></pre></td></tr></table></figure>



<p>相比于分析一，此种方法不是在O(1)时间求得dp[i][j]，所以总的时间复杂度就比分析一大些了，为 O(NWWw¯)O(NWWw¯)级别。</p>
<h2 id="2-4-分析三、转换成01背包"><a href="#2-4-分析三、转换成01背包" class="headerlink" title="2.4 分析三、转换成01背包"></a>2.4 分析三、转换成01背包</h2><p>01背包问题是最基本的背包问题，我们可以考虑把完全背包问题转化为01背包问题来解：将一种物品转换成若干件只能装入0件或者1件的01背包中的物品。</p>
<p>最简单的想法是，考虑到第 i 种物品最多装入 W&#x2F;w[i] 件，于是可以把第 i 种物品转化为 W&#x2F;w[i] 件费用及价值均不变的物品，然后求解这个01背包问题。</p>
<p>更高效的转化方法是采用二进制的思想：把第 i 种物品拆成重量为 wi2kwi2k、价值为 vi2kvi2k 的若干件物品，其中 k 取遍满足 wi2k≤Wwi2k≤W 的非负整数。这是因为不管最优策略选几件第 i 种物品，总可以表示成若干个刚才这些物品的和（例：13 &#x3D; 1 + 4 + 8）。这样就将转换后的物品数目降成了对数级别。具体代码见3.4节模板。</p>
<h1 id="3-多重背包"><a href="#3-多重背包" class="headerlink" title="3. 多重背包"></a>3. 多重背包</h1><h2 id="3-1-题目"><a href="#3-1-题目" class="headerlink" title="3.1 题目"></a>3.1 题目</h2><p>多重背包（bounded knapsack problem）与前面不同就是每种物品是有限个：一共有N种物品，第i（i从1开始）种物品的数量为n[i]，重量为w[i]，价值为v[i]。在总重量不超过背包承载上限W的情况下，能够装入背包的最大价值是多少？</p>
<h2 id="3-2-分析一"><a href="#3-2-分析一" class="headerlink" title="3.2 分析一"></a>3.2 分析一</h2><p>此时的分析和完全背包的分析二差不多，也是从装入第 i 种物品多少件出发：装入第i种物品0件、1件、…n[i]件（还要满足不超过限重）。所以状态方程为：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># k为装入第i种物品的件数, k &lt;= min(n[i], j/w[i])</span><br><span class="line">dp[i][j] = max&#123;(dp[i-1][j − k*w[i]] + k*v[i]) for every k&#125;</span><br></pre></td></tr></table></figure>



<p>同理也可以进行空间优化，而且 j 也必须<strong>逆向枚举</strong>，优化后伪代码为</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 完全背包问题思路二伪代码(空间优化版)</span><br><span class="line">dp[0,...,W] = 0</span><br><span class="line">for i = 1,...,N</span><br><span class="line">    for j = W,...,w[i] // 必须逆向枚举!!!</span><br><span class="line">        for k = [0, 1,..., min(n[i], j/w[i])]</span><br><span class="line">            dp[j] = max(dp[j], dp[j−k*w[i]]+k*v[i])</span><br></pre></td></tr></table></figure>



<p>总的时间复杂度约为 O(NWn¯)&#x3D;O(W∑ini)O(NWn¯)&#x3D;O(W∑ini) 级别。</p>
<h2 id="3-3-分析二、转换成01背包"><a href="#3-3-分析二、转换成01背包" class="headerlink" title="3.3 分析二、转换成01背包"></a>3.3 分析二、转换成01背包</h2><p>采用2.4节类似的思路可以将多重背包转换成01背包问题，采用二进制思路将第 i 种物品分成了 O(logni)O(logni) 件物品，将原问题转化为了复杂度为 O(W∑ilogni)O(W∑ilogni) 的 01 背包问题，相对于分析一是很大的改进，具体代码见3.4节。</p>
<h2 id="3-4-代码模板"><a href="#3-4-代码模板" class="headerlink" title="3.4 代码模板"></a>3.4 代码模板</h2><p>此节根据上面的讲解给出这三种背包问题的解题模板，方便解题使用。尤其注意其中二进制优化是如何实现的。</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">https://tangshusen.me/2019/11/24/knapsack-problem/</span><br><span class="line">01背包, 完全背包, 多重背包模板(二进制优化). </span><br><span class="line">2020.01.04 by tangshusen.</span><br><span class="line"></span><br><span class="line">用法:</span><br><span class="line">    对每个物品调用对应的函数即可, 例如多重背包:</span><br><span class="line">    for(int i = 0; i &lt; N; i++) </span><br><span class="line">        multiple_pack_step(dp, w[i], v[i], num[i], W);</span><br><span class="line"></span><br><span class="line">参数:</span><br><span class="line">    dp   : 空间优化后的一维dp数组, 即dp[i]表示最大承重为i的书包的结果</span><br><span class="line">    w    : 这个物品的重量</span><br><span class="line">    v    : 这个物品的价值</span><br><span class="line">    n    : 这个物品的个数</span><br><span class="line">    max_w: 书包的最大承重</span><br><span class="line">*/</span><br><span class="line">void zero_one_pack_step(vector&lt;int&gt;&amp;dp, int w, int v, int max_w)&#123;</span><br><span class="line">    for(int j = max_w; j &gt;= w; j--) // 反向枚举!!!</span><br><span class="line">        dp[j] = max(dp[j], dp[j - w] + v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void complete_pack_step(vector&lt;int&gt;&amp;dp, int w, int v, int max_w)&#123;</span><br><span class="line">    for(int j = w; j &lt;= max_w; j++) // 正向枚举!!!</span><br><span class="line">        dp[j] = max(dp[j], dp[j - w] + v);</span><br><span class="line"></span><br><span class="line">    // 法二: 转换成01背包, 二进制优化</span><br><span class="line">    // int n = max_w / w, k = 1;</span><br><span class="line">    // while(n &gt; 0)&#123;</span><br><span class="line">    //     zero_one_pack_step(dp, w*k, v*k, max_w);</span><br><span class="line">    //     n -= k;</span><br><span class="line">    //     k = k*2 &gt; n ? n : k*2;</span><br><span class="line">    // &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void multiple_pack_step(vector&lt;int&gt;&amp;dp, int w, int v, int n, int max_w)&#123;</span><br><span class="line">   if(n &gt;= max_w / w) complete_pack_step(dp, w, v, max_w);</span><br><span class="line">   else&#123; // 转换成01背包, 二进制优化</span><br><span class="line">       int k = 1;</span><br><span class="line">       while(n &gt; 0)&#123;</span><br><span class="line">           zero_one_pack_step(dp, w*k, v*k, max_w);</span><br><span class="line">           n -= k;</span><br><span class="line">           k = k*2 &gt; n ? n : k*2;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-其他情形"><a href="#4-其他情形" class="headerlink" title="4. 其他情形"></a>4. 其他情形</h1><p><img data-src="D:/Blog/source/_posts/01%E8%83%8C%E5%8C%85%E7%AE%97%E6%B3%95/4.1.png" alt="img"></p>
<p>本节列举几种比较常见的。</p>
<h2 id="4-1-恰好装满"><a href="#4-1-恰好装满" class="headerlink" title="4.1 恰好装满"></a>4.1 恰好装满</h2><p>背包问题有时候还有一个限制就是必须恰好装满背包，此时基本思路没有区别，只是在初始化的时候有所不同。</p>
<p>如果没有恰好装满背包的限制，我们将dp全部初始化成0就可以了。因为任何容量的背包都有一个合法解“什么都不装”，这个解的价值为0，所以初始时状态的值也就全部为0了。如果有恰好装满的限制，那只应该将dp[0,…,N][0]初始为0，其它dp值均初始化为<code>-inf</code>，因为此时只有容量为0的背包可以在什么也不装情况下被“恰好装满”，其它容量的背包初始均没有合法的解，应该被初始化为<code>-inf</code>。</p>
<h2 id="4-2-求方案总数"><a href="#4-2-求方案总数" class="headerlink" title="4.2 求方案总数"></a>4.2 求方案总数</h2><p>除了在给定每个物品的价值后求可得到的最大价值外，还有一类问题是问装满背包或将背包装至某一指定容量的方案总数。对于这类问题，需要将状态转移方程中的 max 改成 sum ，大体思路是不变的。例如若每件物品均是完全背包中的物品，转移方程即为</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = sum(dp[i−1][j], dp[i][j−w[i]]) // j &gt;= w[i]</span><br></pre></td></tr></table></figure>



<h2 id="4-3-二维背包"><a href="#4-3-二维背包" class="headerlink" title="4.3 二维背包"></a>4.3 二维背包</h2><p>前面讨论的背包容量都是一个量：重量。二维背包问题是指每个背包有两个限制条件（比如重量和体积限制），选择物品必须要满足这两个条件。此类问题的解法和一维背包问题不同就是dp数组要多开一维，其他和一维背包完全一样，例如5.4节。</p>
<h2 id="4-4-求最优方案"><a href="#4-4-求最优方案" class="headerlink" title="4.4 求最优方案"></a>4.4 求最优方案</h2><p>一般而言，背包问题是要求一个最优值，如果要求输出这个最优值的方案，可以参照一般动态规划问题输出方案的方法：记录下每个状态的最优值是由哪一个策略推出来的，这样便可根据这条策略找到上一个状态，从上一个状态接着向前推即可。</p>
<p>以01背包为例，我们可以再用一个数组G[i][j]来记录方案，设 <code>G[i][j] = 0</code>表示计算 dp[i][j] 的值时是采用了max中的前一项(也即dp[i−1][j])，<code>G[i][j] = 1</code> 表示采用了方程的后一项。即分别表示了两种策略: 未装入第 i 个物品及装了第 i 个物品。其实我们也可以直接从求好的dp[i][j]反推方案：若 <code>dp[i][j] = dp[i−1][j]</code> 说明未选第i个物品，反之说明选了。</p>
<h1 id="5-LeetCode相关题目"><a href="#5-LeetCode相关题目" class="headerlink" title="5. LeetCode相关题目"></a>5. LeetCode相关题目</h1><p>本节对LeetCode上面的背包问题进行讨论。</p>
<h2 id="5-1-Partition-Equal-Subset-Sum（分割等和子集）"><a href="#5-1-Partition-Equal-Subset-Sum（分割等和子集）" class="headerlink" title="5.1 Partition Equal Subset Sum（分割等和子集）"></a>5.1 Partition Equal Subset Sum（分割等和子集）</h2><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcGFydGl0aW9uLWVxdWFsLXN1YnNldC1zdW0v">416. Partition Equal Subset Sum（分割等和子集）<i class="fa fa-external-link-alt"></i></span></p>
<p>题目给定一个只包含正整数的非空数组。问是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p>
<p>由于所有元素的和sum已知，所以两个子集的和都应该是sum&#x2F;2（所以前提是sum不能是奇数），即题目转换成从这个数组里面选取一些元素使这些元素和为sum&#x2F;2。如果我们将所有元素的值看做是物品的重量，每件物品价值都为1，所以这就是一个恰好装满的01背包问题。</p>
<p>我们定义空间优化后的状态数组dp，由于是恰好装满，所以应该将dp[0]初始化为0而将其他全部初始化为<code>INT_MIN</code>，然后按照类似1.2节的伪代码更新dp：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int capacity = sum / 2;</span><br><span class="line">vector&lt;int&gt;dp(capacity + 1, INT_MIN);</span><br><span class="line">dp[0] = 0;</span><br><span class="line">for(int i = 1; i &lt;= n; i++)</span><br><span class="line">    for(int j = capacity; j &gt;= nums[i-1]; j--)</span><br><span class="line">        dp[j] = max(dp[j], 1 + dp[j - nums[i-1]]);</span><br></pre></td></tr></table></figure>



<p>更新完毕后，如果dp[sum&#x2F;2]大于0说明满足题意。</p>
<p>由于此题最后求的是能不能进行划分，所以dp的每个元素定义成bool型就可以了，然后将dp[0]初始为true其他初始化为false，而转移方程就应该是用或操作而不是max操作。完整代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">bool canPartition(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">    int sum = 0, n = nums.size();</span><br><span class="line">    for(int &amp;num: nums) sum += num;</span><br><span class="line">    if(sum % 2) return false;</span><br><span class="line">    </span><br><span class="line">    int capacity = sum / 2;</span><br><span class="line">    vector&lt;bool&gt;dp(capacity + 1, false);</span><br><span class="line">    dp[0] = true;</span><br><span class="line">    for(int i = 1; i &lt;= n; i++)</span><br><span class="line">        for(int j = capacity; j &gt;= nums[i-1]; j--)</span><br><span class="line">            dp[j] = dp[j] || dp[j - nums[i-1]];</span><br><span class="line">        </span><br><span class="line">    return dp[capacity];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>另外此题还有一个更巧妙更快的解法，基本思路是用一个bisets来记录所有可能子集的和，详见[我的Github](<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1NodXNlblRhbmcvTGVldENvZGUvYmxvYi9tYXN0ZXIvc29sdXRpb25zLzQxNg==">https://github.com/ShusenTang/LeetCode/blob/master/solutions/416<i class="fa fa-external-link-alt"></i></span>. Partition Equal Subset Sum.md)。</p>
</blockquote>
<h2 id="5-2-Coin-Change（零钱兑换）"><a href="#5-2-Coin-Change（零钱兑换）" class="headerlink" title="5.2 Coin Change（零钱兑换）"></a>5.2 Coin Change（零钱兑换）</h2><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvY29pbi1jaGFuZ2Uv">322. Coin Change<i class="fa fa-external-link-alt"></i></span></p>
<p>题目给定一个价值amount和一些面值，假设每个面值的硬币数都是无限的，问我们最少能用几个硬币组成给定的价值。</p>
<p>如果我们将面值看作是物品，面值金额看成是物品的重量，每件物品的价值均为1，这样此题就是是一个恰好装满的完全背包问题了。不过这里不是求最多装入多少物品而是求最少，我们只需要将2.2节的转态转移方程中的max改成min即可，又由于是恰好装满，所以除了dp[0]，其他都应初始化为<code>INT_MAX</code>。完整代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int coinChange(vector&lt;int&gt;&amp; coins, int amount) &#123;</span><br><span class="line">    vector&lt;int&gt;dp(amount + 1, INT_MAX);</span><br><span class="line">    dp[0] = 0;</span><br><span class="line">    </span><br><span class="line">    for(int i = 1; i &lt;= coins.size(); i++)</span><br><span class="line">        for(int j = coins[i-1]; j &lt;= amount; j++)&#123;</span><br><span class="line">            // 下行代码会在 1+INT_MAX 时溢出</span><br><span class="line">            // dp[j] = min(dp[j], 1 + dp[j - coins[i-1]]); </span><br><span class="line">            if(dp[j] - 1 &gt; dp[j - coins[i-1]])</span><br><span class="line">                dp[j] = 1 + dp[j - coins[i-1]];   </span><br><span class="line">        &#125;</span><br><span class="line">    return dp[amount] == INT_MAX ? -1 : dp[amount];   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>注意上面<code>1 + dp[j - coins[i-1]]</code>会存在溢出的风险，所以我们换了个写法。</p>
<blockquote>
<p>另外此题还可以进行搜索所有可能然后保持一个全局的结果res，但是直接搜索会超时，所以需要进行精心剪枝，剪枝后可击败99%。详见[我的Github](<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1NodXNlblRhbmcvTGVldENvZGUvYmxvYi9tYXN0ZXIvc29sdXRpb25zLzMyMg==">https://github.com/ShusenTang/LeetCode/blob/master/solutions/322<i class="fa fa-external-link-alt"></i></span>. Coin Change.md)。</p>
</blockquote>
<h2 id="5-3-Target-Sum（目标和）"><a href="#5-3-Target-Sum（目标和）" class="headerlink" title="5.3 Target Sum（目标和）"></a>5.3 Target Sum（目标和）</h2><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvdGFyZ2V0LXN1bS8=">494. Target Sum<i class="fa fa-external-link-alt"></i></span></p>
<p>这道题给了我们一个数组（元素非负），和一个目标值，要求给数组中每个数字前添加正号或负号所组成的表达式结果与目标值S相等，求有多少种情况。</p>
<p>假设所有元素和为sum，所有添加正号的元素的和为A，所有添加负号的元素和为B，则有<code>sum = A + B</code> 且 <code>S = A - B</code>，解方程得<code>A = (sum + S)/2</code>。即题目转换成：从数组中选取一些元素使和恰好为<code>(sum + S) / 2</code>。可见这是一个恰好装满的01背包问题，要求所有方案数，将1.2节状态转移方程中的max改成求和即可。需要注意的是，虽然这里是恰好装满，但是dp初始值不应该是<code>inf</code>，因为这里求的不是总价值而是方案数，应该全部初始为0（除了dp[0]初始化为1）。所以代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">int findTargetSumWays(vector&lt;int&gt;&amp; nums, int S) &#123;</span><br><span class="line">    int sum = 0;</span><br><span class="line">    // for(int &amp;num: nums) sum += num;</span><br><span class="line">    sum = accumulate(nums.begin(), nums.end(), 0);</span><br><span class="line">    if(S &gt; sum || sum &lt; -S) return 0; // 肯定不行</span><br><span class="line">    if((S + sum) &amp; 1) return 0; // 奇数</span><br><span class="line">    int target = (S + sum) &gt;&gt; 1;</span><br><span class="line">    </span><br><span class="line">    vector&lt;int&gt;dp(target + 1, 0);</span><br><span class="line">    </span><br><span class="line">    dp[0] = 1;</span><br><span class="line">    for(int i = 1; i &lt;= nums.size(); i++)</span><br><span class="line">        for(int j = target; j &gt;= nums[i-1]; j--)</span><br><span class="line">            dp[j] = dp[j] + dp[j - nums[i-1]];</span><br><span class="line">    </span><br><span class="line">    return dp[target];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-4-Ones-and-Zeros（一和零）"><a href="#5-4-Ones-and-Zeros（一和零）" class="headerlink" title="5.4 Ones and Zeros（一和零）"></a>5.4 Ones and Zeros（一和零）</h2><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvb25lcy1hbmQtemVyb2VzLw==">474. Ones and Zeroes<i class="fa fa-external-link-alt"></i></span></p>
<p>题目给定一个仅包含 0 和 1 字符串的数组。任务是从数组中选取尽可能多的字符串，使这些字符串包含的0和1的数目分别不超过m和n。</p>
<p>我们把每个字符串看做是一件物品，把字符串中0的数目和1的数目看做是两种“重量”，所以就变成了一个二维01背包问题，书包的两个限重分别是 m 和 n，要求书包能装下的物品的最大数目（也相当于价值最大，设每个物品价值为1）。</p>
<p>我们可以提前把每个字符串的两个“重量” <code>w0</code>和<code>w1</code>算出来用数组存放，但是注意到只需要用一次这两个值，所以我们只需在用到的时候计算<code>w0</code>和<code>w1</code>就行了，这样就不用额外的数组存放。完整代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">int findMaxForm(vector&lt;string&gt;&amp; strs, int m, int n) &#123;</span><br><span class="line">    int num = strs.size();</span><br><span class="line">    int w0, w1;</span><br><span class="line">    </span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt;dp(m+1, vector&lt;int&gt;(n+1, 0));</span><br><span class="line">    </span><br><span class="line">    for(int i = 1; i &lt;= num; i++)&#123;</span><br><span class="line">        w0 = 0; w1 = 0;</span><br><span class="line">        // 计算第i-1个字符串的两个重量</span><br><span class="line">        for(char &amp;c: strs[i - 1])&#123;</span><br><span class="line">            if(c == &#x27;0&#x27;) w0 += 1;</span><br><span class="line">            else w1 += 1;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        // 01背包, 逆向迭代更新dp</span><br><span class="line">        for(int j = m; j &gt;= w0; j--)</span><br><span class="line">            for(int k = n; k &gt;= w1; k--)</span><br><span class="line">                dp[j][k] = max(dp[j][k], 1+dp[j-w0][k-w1]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return dp[m][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h1><p>本文讨论了几类背包问题及LeetCode相关题目，其中01背包问题和完全背包问题是最常考的，另外还需要注意一些其他变种例如恰好装满、二维背包、求方案总数等等。除了本文讨论的这些背包问题之外，还存在一些其他的变种，但只要深刻领会本文所列的背包问题的思路和状态转移方程，遇到其它的变形问题，应该也不难想出算法。如果想更加详细地理解背包问题，推荐阅读经典的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RpYW55aWN1aS9wYWNrL2Jsb2IvbWFzdGVyL1YyLnBkZg==">背包问题九讲<i class="fa fa-external-link-alt"></i></span>。</p>

    </div>

    
    
    

    <footer class="post-footer">
          

<div class="post-copyright">
<ul>
  <li class="post-copyright-author">
      <strong>Post author:  </strong>Kayleh
  </li>
  <li class="post-copyright-link">
      <strong>Post link: </strong>
      <a href="https://blog.kayleh.top/posts/01Backpack" title="01背包算法">https://blog.kayleh.top/posts/01Backpack</a>
  </li>
  <li class="post-copyright-license">
      <strong>Copyright Notice:  </strong>All articles in this blog are licensed under <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzQuMC8="><i class="fab fa-fw fa-creative-commons"></i>BY-NC-SA</span> unless stating additionally.
  </li>
</ul>
</div>

          <div class="followme">
  <span>Welcome to my other publishing channels</span>

  <div class="social-list">

      <div class="social-item">
          <a target="_blank" class="social-link" href="/atom.xml">
            <span class="icon">
              <i class="fa fa-rss"></i>
            </span>

            <span class="label">RSS</span>
          </a>
      </div>
  </div>
</div>

          <div class="post-tags">
              <a href="/tags/algorithm/" rel="tag"><i class="fa fa-tag"></i> algorithm</a>
          </div>

        
  <div class="social-like a2a_kit a2a_kit_size_32 a2a_default_style">
    <a class="a2a_dd" target="_blank" rel="noopener" href="https://www.addtoany.com/share"></a>
      <a class="a2a_button_facebook"></a>
      <a class="a2a_button_twitter"></a>
  </div>

          <div class="post-nav">
            <div class="post-nav-item">
                <a href="/posts/mysql-struct" rel="prev" title="MYSQL逻辑架构">
                  <i class="fa fa-angle-left"></i> MYSQL逻辑架构
                </a>
            </div>
            <div class="post-nav-item">
                <a href="/posts/Graph-degree" rel="next" title="离散图论1：基础">
                  离散图论1：基础 <i class="fa fa-angle-right"></i>
                </a>
            </div>
          </div>
    </footer>
  </article>
</div>






    <div class="comments gitalk-container"></div>
</div>
  </main>

  <footer class="footer">
    <div class="footer-inner">

  <div class="copyright">
    &copy; 2019 – 
    <span itemprop="copyrightYear">2025</span>
    <span class="with-love">
      <i class="fa fa-heart"></i>
    </span>
    <span class="author" itemprop="copyrightHolder">true</span>
  </div>
<div class="busuanzi-count">
    <span class="post-meta-item" id="busuanzi_container_site_uv">
      <span class="post-meta-item-icon">
        <i class="fa fa-user"></i>
      </span>
      <span class="site-uv" title="Total Visitors">
        <span id="busuanzi_value_site_uv"></span>
      </span>
    </span>
    <span class="post-meta-item" id="busuanzi_container_site_pv">
      <span class="post-meta-item-icon">
        <i class="fa fa-eye"></i>
      </span>
      <span class="site-pv" title="Total Views">
        <span id="busuanzi_value_site_pv"></span>
      </span>
    </span>
</div>

    </div>
  </footer>

  
  <div class="toggle sidebar-toggle" role="button">
    <span class="toggle-line"></span>
    <span class="toggle-line"></span>
    <span class="toggle-line"></span>
  </div>
  <div class="sidebar-dimmer"></div>
  <div class="back-to-top" role="button" aria-label="Back to top">
    <i class="fa fa-arrow-up fa-lg"></i>
    <span>0%</span>
  </div>

<noscript>
  <div class="noscript-warning">Theme NexT works best with JavaScript enabled</div>
</noscript>


  
  <script size="300" alpha="0.6" zIndex="-1" src="https://cdnjs.cloudflare.com/ajax/libs/ribbon.js/1.0.2/ribbon.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js" integrity="sha256-XL2inqUJaslATFnHdJOi9GfQ60on8Wx1C2H8DYiN1xY=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/next-theme-pjax/0.6.0/pjax.min.js" integrity="sha256-vxLn1tSKWD4dqbMRyv940UYw4sXgMtYcK6reefzZrao=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/fancyapps-ui/5.0.31/fancybox/fancybox.umd.js" integrity="sha256-a+H7FYzJv6oU2hfsfDGM2Ohw/cR9v+hPfxHCLdmCrE8=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/medium-zoom/1.1.0/medium-zoom.min.js" integrity="sha256-ZgMyDAIYDYGxbcpJcfUnYwNevG/xi9OHKaR/8GK+jWc=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/lozad.js/1.16.0/lozad.min.js" integrity="sha256-mOFREFhqmHeQbXpK2lp4nA3qooVgACfh88fpJftLBbc=" crossorigin="anonymous"></script>
<script src="/js/comments.js"></script><script src="/js/utils.js"></script><script src="/js/motion.js"></script><script src="/js/sidebar.js"></script><script src="/js/next-boot.js"></script><script src="/js/pjax.js"></script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-generator-searchdb/1.4.1/search.js" integrity="sha256-1kfA5uHPf65M5cphT2dvymhkuyHPQp5A53EGZOnOLmc=" crossorigin="anonymous"></script>
<script src="/js/third-party/search/local-search.js"></script>
<script src="//code.tidio.co/dq5klo9ydptaxokj83vcwnusf63dogzr.js"></script>
<script src="/js/third-party/chat/tidio.js"></script>




  <script src="/js/third-party/fancybox.js"></script>

  <script src="/js/third-party/pace.js"></script>

  <script src="/js/third-party/addtoany.js"></script>

  
  <script data-pjax async src="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"></script>




  

  <script class="next-config" data-name="enableMath" type="application/json">false</script><script class="next-config" data-name="mathjax" type="application/json">{"enable":true,"tags":"ams","js":{"url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.2.2/es5/tex-mml-chtml.js","integrity":"sha256-MASABpB4tYktI2Oitl4t+78w/lyA+D7b/s9GEP0JOGI="}}</script>
<script src="/js/third-party/math/mathjax.js"></script>


<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/gitalk/1.8.0/gitalk.css" integrity="sha256-AJnUHL7dBv6PGaeyPQJcgQPDjt/Hn/PvYZde1iqfp8U=" crossorigin="anonymous">

<script class="next-config" data-name="gitalk" type="application/json">{"enable":true,"github_id":"Kayleh","repo":"kayleh.top.giscus","client_id":"Ov23liJZlhhVSuSynF9Q","client_secret":"d16c7023956f130d20927ad469dfe83295864094","admin_user":"Kayleh","distraction_free_mode":true,"proxy":"https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token","language":null,"js":{"url":"https://cdnjs.cloudflare.com/ajax/libs/gitalk/1.8.0/gitalk.min.js","integrity":"sha256-MVK9MGD/XJaGyIghSVrONSnoXoGh3IFxLw0zfvzpxR4="},"path_md5":"e2a8097df274fd9f96010fc1450f774c"}</script>
<script src="/js/third-party/comments/gitalk.js"></script>

</body>
</html>
