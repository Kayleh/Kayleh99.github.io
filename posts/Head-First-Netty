<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width">
<meta name="theme-color" content="#222" media="(prefers-color-scheme: light)">
<meta name="theme-color" content="#222" media="(prefers-color-scheme: dark)"><meta name="generator" content="Hexo 7.3.0">
<link rel="preconnect" href="https://cdnjs.cloudflare.com" crossorigin>
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/mygo.jpg">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/mygo.jpg">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">

<link rel="stylesheet" href="/css/main.css">



<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" integrity="sha256-dABdfBfUoC8vJUBOwGVdm8L9qlMWaHTIfXt+7GnZCIo=" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.1.1/animate.min.css" integrity="sha256-PR7ttpcvz8qrF57fur/yAx1qXMFJeJFiA6pSzWi0OIE=" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/fancyapps-ui/5.0.31/fancybox/fancybox.css" integrity="sha256-gkQVf8UKZgQ0HyuxL/VnacadJ+D2Kox2TCEBuNQg5+w=" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/pace/1.2.4/themes/blue/pace-theme-center-simple.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/pace/1.2.4/pace.min.js" integrity="sha256-gqd7YTjg/BtfqWSwsJOvndl0Bxc8gFImLEkXQT8+qj0=" crossorigin="anonymous"></script>

<script class="next-config" data-name="main" type="application/json">{"hostname":"blog.kayleh.top","root":"/","images":"/images","scheme":"Gemini","darkmode":true,"version":"8.22.0","exturl":true,"sidebar":{"position":"left","width_expanded":320,"width_dual_column":240,"display":"post","padding":18,"offset":12},"hljswrap":true,"copycode":{"enable":false,"style":null},"fold":{"enable":false,"height":500},"bookmark":{"enable":false,"color":"#222","save":"auto"},"mediumzoom":true,"lazyload":true,"pangu":false,"comments":{"style":"tabs","active":"gitalk","storage":true,"lazyload":true,"nav":null,"activeClass":"gitalk"},"stickytabs":false,"motion":{"enable":true,"async":false,"duration":200,"transition":{"menu_item":"fadeInDown","post_block":"fadeIn","post_header":"fadeInDown","post_body":"fadeInDown","coll_header":"fadeInLeft","sidebar":"fadeInUp"}},"i18n":{"placeholder":"Searching...","empty":"We didn't find any results for the search: ${query}","hits_time":"${hits} results found in ${time} ms","hits":"${hits} results found"}}</script><script src="/js/config.js"></script>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7457165067653912"
     crossorigin="anonymous"></script>
    <meta name="description" content="思维导图 前言">
<meta property="og:type" content="blog">
<meta property="og:title" content="Head First Netty">
<meta property="og:url" content="https://blog.kayleh.top/posts/Head-First-Netty">
<meta property="og:site_name" content="Kayleh&#39;s Blog">
<meta property="og:description" content="思维导图 前言">
<meta property="og:locale" content="en_US">
<meta property="og:image" content="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/b3fc6eb690464940b4a9b1100cfed5a2.png">
<meta property="og:image" content="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/15944ade0142471399997efd68e52948.png">
<meta property="og:image" content="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/cc27d56addd74e82b6b6b349c7f3769b.png">
<meta property="og:image" content="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/92908e107d6a487bb930ab6cd6be269f.png">
<meta property="og:image" content="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/419e8af300b24c9eaed71a76ddc2ddeb.png">
<meta property="og:image" content="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/23835a6ae2374897bf28a0b70fce9cc8.png">
<meta property="og:image" content="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/173194f21adfa111">
<meta property="og:image" content="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/40cf762660d9455eb6066119cf5eeb49.png">
<meta property="og:image" content="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/ae5c6ed3008d4323aaa817e9cb46437a.png">
<meta property="og:image" content="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/1731951ae3c43228">
<meta property="og:image" content="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/1731951f80b07785">
<meta property="og:image" content="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/5fa70ed04e234fad9e524b3766051c4a.png">
<meta property="og:image" content="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/e7bac501d86e4e75a897686d7bab40fe.png">
<meta property="og:image" content="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/4c6e9319213b489bbfcc2d7697cf03b0.png">
<meta property="og:image" content="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/c77ea0ea4e554d65b61ee0a2eae78a0c.png">
<meta property="og:image" content="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/7a95eeb933be4470acdc5f0f07afbc2a.png">
<meta property="og:image" content="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/17319554d4546047">
<meta property="article:published_time" content="2021-05-25T22:26:52.000Z">
<meta property="article:modified_time" content="2025-02-03T16:14:08.815Z">
<meta property="article:author" content="Kayleh">
<meta property="article:tag" content="frame">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/b3fc6eb690464940b4a9b1100cfed5a2.png">


<link rel="canonical" href="https://blog.kayleh.top/posts/Head-First-Netty">


<script class="next-config" data-name="page" type="application/json">{"sidebar":"","isHome":false,"isPost":true,"lang":"en","comments":true,"permalink":"https://blog.kayleh.top/posts/Head-First-Netty","path":"posts/Head-First-Netty","title":"Head First Netty"}</script>

<script class="next-config" data-name="calendar" type="application/json">""</script>
<title>Head First Netty | Kayleh's Blog</title>
  




  <script>
    (function(c,l,a,r,i,t,y){
        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};
        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;
        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);
    })(window, document, "clarity", "script", "q44a4p85n0");
</script>




  <noscript>
    <link rel="stylesheet" href="/css/noscript.css">
  </noscript>
</head>

<body itemscope itemtype="http://schema.org/WebPage" class="use-motion">
  <div class="headband"></div>

  <main class="main">
    <div class="column">
      <header class="header" itemscope itemtype="http://schema.org/WPHeader"><div class="site-brand-container">
  <div class="site-nav-toggle">
    <div class="toggle" aria-label="Toggle navigation bar" role="button">
        <span class="toggle-line"></span>
        <span class="toggle-line"></span>
        <span class="toggle-line"></span>
    </div>
  </div>

  <div class="site-meta">

    <a href="/" class="brand" rel="start">
      <i class="logo-line"></i>
      <p class="site-title">Kayleh's Blog</p>
      <i class="logo-line"></i>
    </a>
  </div>

  <div class="site-nav-right">
    <div class="toggle popup-trigger" aria-label="Search" role="button">
        <i class="fa fa-search fa-fw fa-lg"></i>
    </div>
  </div>
</div>



<nav class="site-nav">
  <ul class="main-menu menu"><li class="menu-item menu-item-home"><a href="/" rel="section"><i class="fa fa-home fa-fw"></i>Home</a></li><li class="menu-item menu-item-archives"><a href="/archives/" rel="section"><i class="fa fa-archive fa-fw"></i>Archives<span class="badge">247</span></a></li><li class="menu-item menu-item-about"><a href="/about/" rel="section"><i class="fa fa-user fa-fw"></i>About</a></li><li class="menu-item menu-item-tags"><a href="/tags/" rel="section"><i class="fa fa-tags fa-fw"></i>Tags<span class="badge">34</span></a></li><li class="menu-item menu-item-friends"><a href="/friends" rel="section"><i class="fa fa-heartbeat fa-fw"></i>friends</a></li><li class="menu-item menu-item-sitemap"><a href="/rss.xml" rel="section"><i class="fa fa-sitemap fa-fw"></i>Sitemap</a></li>
      <li class="menu-item menu-item-search">
        <a role="button" class="popup-trigger"><i class="fa fa-search fa-fw"></i>Search
        </a>
      </li>
  </ul>
</nav>



  <div class="search-pop-overlay">
    <div class="popup search-popup">
      <div class="search-header">
        <span class="search-icon">
          <i class="fa fa-search"></i>
        </span>
        <div class="search-input-container">
          <input autocomplete="off" autocapitalize="off" maxlength="80"
                placeholder="Searching..." spellcheck="false"
                type="search" class="search-input">
        </div>
        <span class="popup-btn-close" role="button">
          <i class="fa fa-times-circle"></i>
        </span>
      </div>
      <div class="search-result-container">
        <div class="search-result-icon">
          <i class="fa fa-spinner fa-pulse fa-5x"></i>
        </div>
      </div>
    </div>
  </div>

</header>
        
  
  <aside class="sidebar">

    <div class="sidebar-inner sidebar-nav-active sidebar-toc-active">
      <ul class="sidebar-nav">
        <li class="sidebar-nav-toc">
          Table of Contents
        </li>
        <li class="sidebar-nav-overview">
          Overview
        </li>
      </ul>

      <div class="sidebar-panel-container">
        <!--noindex-->
        <div class="post-toc-wrap sidebar-panel">
            <div class="post-toc animated"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE"><span class="nav-number">1.</span> <span class="nav-text">思维导图</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#%E5%89%8D%E8%A8%80"><span class="nav-number">2.</span> <span class="nav-text">前言</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#%E4%B8%80%E3%80%81Netty%E6%A6%82%E8%BF%B0"><span class="nav-number">3.</span> <span class="nav-text">一、Netty概述</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#%E4%BA%8C%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8Netty"><span class="nav-number">4.</span> <span class="nav-text">二、为什么使用Netty</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#2-1-NIO%E7%9A%84%E7%BC%BA%E7%82%B9"><span class="nav-number">4.1.</span> <span class="nav-text">2.1 NIO的缺点</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#2-2-Netty%E7%9A%84%E4%BC%98%E7%82%B9"><span class="nav-number">4.2.</span> <span class="nav-text">2.2 Netty的优点</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#%E4%B8%89%E3%80%81%E6%9E%B6%E6%9E%84%E5%9B%BE"><span class="nav-number">5.</span> <span class="nav-text">三、架构图</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#%E5%9B%9B%E3%80%81%E6%B0%B8%E8%BF%9C%E7%9A%84Hello-Word"><span class="nav-number">6.</span> <span class="nav-text">四、永远的Hello Word</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#4-1-%E5%BC%95%E5%85%A5Maven%E4%BE%9D%E8%B5%96"><span class="nav-number">6.1.</span> <span class="nav-text">4.1 引入Maven依赖</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#4-2-%E5%88%9B%E5%BB%BA%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%90%AF%E5%8A%A8%E7%B1%BB"><span class="nav-number">6.2.</span> <span class="nav-text">4.2 创建服务端启动类</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#4-3-%E5%88%9B%E5%BB%BA%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%A4%84%E7%90%86%E5%99%A8"><span class="nav-number">6.3.</span> <span class="nav-text">4.3 创建服务端处理器</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#4-4-%E5%88%9B%E5%BB%BA%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%90%AF%E5%8A%A8%E7%B1%BB"><span class="nav-number">6.4.</span> <span class="nav-text">4.4 创建客户端启动类</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#4-5-%E5%88%9B%E5%BB%BA%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%A4%84%E7%90%86%E5%99%A8"><span class="nav-number">6.5.</span> <span class="nav-text">4.5 创建客户端处理器</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#4-6-%E6%B5%8B%E8%AF%95"><span class="nav-number">6.6.</span> <span class="nav-text">4.6 测试</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#%E4%BA%94%E3%80%81Netty%E7%9A%84%E7%89%B9%E6%80%A7%E4%B8%8E%E9%87%8D%E8%A6%81%E7%BB%84%E4%BB%B6"><span class="nav-number">7.</span> <span class="nav-text">五、Netty的特性与重要组件</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#5-1-taskQueue%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97"><span class="nav-number">7.1.</span> <span class="nav-text">5.1 taskQueue任务队列</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#5-2-scheduleTaskQueue%E5%BB%B6%E6%97%B6%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97"><span class="nav-number">7.2.</span> <span class="nav-text">5.2 scheduleTaskQueue延时任务队列</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#5-3-Future%E5%BC%82%E6%AD%A5%E6%9C%BA%E5%88%B6"><span class="nav-number">7.3.</span> <span class="nav-text">5.3 Future异步机制</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#5-4-Bootstrap%E4%B8%8EServerBootStrap"><span class="nav-number">7.4.</span> <span class="nav-text">5.4 Bootstrap与ServerBootStrap</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#5-4-1-group"><span class="nav-number">7.4.1.</span> <span class="nav-text">5.4.1 group()</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#5-4-2-channel"><span class="nav-number">7.4.2.</span> <span class="nav-text">5.4.2 channel()</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#5-4-3-option-%E4%B8%8EchildOption"><span class="nav-number">7.4.3.</span> <span class="nav-text">5.4.3 option()与childOption()</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#5-4-4-%E8%AE%BE%E7%BD%AE%E6%B5%81%E6%B0%B4%E7%BA%BF-%E9%87%8D%E7%82%B9"><span class="nav-number">7.4.4.</span> <span class="nav-text">5.4.4 设置流水线(重点)</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#5-4-5-bind"><span class="nav-number">7.4.5.</span> <span class="nav-text">5.4.5 bind()</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#5-4-6-%E4%BC%98%E9%9B%85%E5%9C%B0%E5%85%B3%E9%97%ADEventLoopGroup"><span class="nav-number">7.4.6.</span> <span class="nav-text">5.4.6 优雅地关闭EventLoopGroup</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#5-5-Channel"><span class="nav-number">7.5.</span> <span class="nav-text">5.5 Channel</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#5-5-1-%E8%8E%B7%E5%8F%96channel%E7%9A%84%E7%8A%B6%E6%80%81"><span class="nav-number">7.5.1.</span> <span class="nav-text">5.5.1 获取channel的状态</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#5-5-2-%E8%8E%B7%E5%8F%96channel%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0"><span class="nav-number">7.5.2.</span> <span class="nav-text">5.5.2 获取channel的配置参数</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#5-5-3-channel%E6%94%AF%E6%8C%81%E7%9A%84IO%E6%93%8D%E4%BD%9C"><span class="nav-number">7.5.3.</span> <span class="nav-text">5.5.3 channel支持的IO操作</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#5-6-Selector"><span class="nav-number">7.6.</span> <span class="nav-text">5.6 Selector</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#5-7-PiPeline%E4%B8%8EChannelPipeline"><span class="nav-number">7.7.</span> <span class="nav-text">5.7 PiPeline与ChannelPipeline</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#5-8-ChannelHandlerContext"><span class="nav-number">7.8.</span> <span class="nav-text">5.8 ChannelHandlerContext</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#5-9-EventLoopGroup"><span class="nav-number">7.9.</span> <span class="nav-text">5.9 EventLoopGroup</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#5-9-1-%E8%BD%AE%E8%AF%A2%E6%9C%BA%E5%88%B6%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86"><span class="nav-number">7.9.1.</span> <span class="nav-text">5.9.1 轮询机制的实现原理</span></a></li></ol></li></ol></li></ol></div>
        </div>
        <!--/noindex-->

        <div class="site-overview-wrap sidebar-panel">
          <div class="site-author animated" itemprop="author" itemscope itemtype="http://schema.org/Person">
    <img class="site-author-image" itemprop="image" alt="Kayleh"
      src="/images/mygo.jpg">
  <p class="site-author-name" itemprop="name">Kayleh</p>
  <div class="site-description" itemprop="description"></div>
</div>
<div class="site-state-wrap animated">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
        <a href="/archives/">
          <span class="site-state-item-count">247</span>
          <span class="site-state-item-name">posts</span>
        </a>
      </div>
      <div class="site-state-item site-state-categories">
        <span class="site-state-item-count">5</span>
        <span class="site-state-item-name">categories</span>
      </div>
      <div class="site-state-item site-state-tags">
          <a href="/tags/">
        <span class="site-state-item-count">34</span>
        <span class="site-state-item-name">tags</span></a>
      </div>
  </nav>
</div>
  <div class="links-of-author animated">
      <span class="links-of-author-item">
        <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2theWxlaA==" title="GitHub → https:&#x2F;&#x2F;github.com&#x2F;kayleh"><i class="fab fa-github fa-fw"></i>GitHub</span>
      </span>
      <span class="links-of-author-item">
        <span class="exturl" data-url="bWFpbHRvOndlYnNpdGVAa2F5bGVoLnRvcA==" title="E-Mail → mailto:website@kayleh.top"><i class="fa fa-envelope fa-fw"></i>E-Mail</span>
      </span>
  </div>
  <div class="cc-license animated" itemprop="license">
    <span class="exturl cc-opacity" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzQuMC8="><img src="https://cdnjs.cloudflare.com/ajax/libs/creativecommons-vocabulary/2020.11.3/assets/license_badges/small/by_nc_sa.svg" alt="Creative Commons"></span>
  </div>

        </div>
      </div>
    </div>

    
  </aside>


    </div>

    <div class="main-inner post posts-expand">


  


<div class="post-block">
  
  

  <article itemscope itemtype="http://schema.org/Article" class="post-content" lang="en">
    <link itemprop="mainEntityOfPage" href="https://blog.kayleh.top/posts/Head-First-Netty">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/mygo.jpg">
      <meta itemprop="name" content="Kayleh">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="Kayleh's Blog">
      <meta itemprop="description" content="">
    </span>

    <span hidden itemprop="post" itemscope itemtype="http://schema.org/CreativeWork">
      <meta itemprop="name" content="Head First Netty | Kayleh's Blog">
      <meta itemprop="description" content="">
    </span>
      <header class="post-header">
        <h1 class="post-title" itemprop="name headline">
          Head First Netty<span class="exturl post-edit-link" data-url="aHR0cHM6Ly9naXRodWIuY29tL2theWxlaC9rYXlsZWguZ2l0aHViLmlvMi9lZGl0L21hc3Rlci9zb3VyY2UvX3Bvc3RzL2hlYWQtZmlyc3QtbmV0dHkubWQ=" title="Edit this post"><i class="fa fa-pen-nib"></i></span>
        </h1>

        <div class="post-meta-container">
          <div class="post-meta">
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-calendar"></i>
      </span>
      <span class="post-meta-item-text">Posted on</span>

      <time title="Created: 2021-05-26 06:26:52" itemprop="dateCreated datePublished" datetime="2021-05-26T06:26:52+08:00">2021-05-26</time>
    </span>
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-calendar-check"></i>
      </span>
      <span class="post-meta-item-text">Edited on</span>
      <time title="Modified: 2025-02-04 00:14:08" itemprop="dateModified" datetime="2025-02-04T00:14:08+08:00">2025-02-04</time>
    </span>

  
    <span class="post-meta-item" title="Views" id="busuanzi_container_page_pv">
      <span class="post-meta-item-icon">
        <i class="far fa-eye"></i>
      </span>
      <span class="post-meta-item-text">Views: </span>
      <span id="busuanzi_value_page_pv"></span>
    </span>
</div>

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody"><h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><p><img data-src="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/b3fc6eb690464940b4a9b1100cfed5a2.png" alt="image.png"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要讲述Netty框架的一些特性以及重要组件，希望看完之后能对Netty框架有一个比较直观的感受，希望能帮助读者快速入门Netty，减少一些弯路。</p>
<h1 id="一、Netty概述"><a href="#一、Netty概述" class="headerlink" title="一、Netty概述"></a>一、Netty概述</h1><p>官方的介绍：</p>
<blockquote>
<p>Netty is <em>an asynchronous event-driven network application framework</em><br>for rapid development of maintainable high performance protocol servers &amp; clients.</p>
</blockquote>
<p><strong>Netty</strong>是 一个<strong>异步事件驱动</strong>的网络应用程序框架，用于<strong>快速开发可维护的高性能协议服务器和客户端</strong>。</p>
<h1 id="二、为什么使用Netty"><a href="#二、为什么使用Netty" class="headerlink" title="二、为什么使用Netty"></a>二、为什么使用Netty</h1><p>从官网上介绍，Netty是一个网络应用程序框架，开发服务器和客户端。也就是用于网络编程的一个框架。既然是网络编程，Socket就不谈了，为什么不用NIO呢？</p>
<h2 id="2-1-NIO的缺点"><a href="#2-1-NIO的缺点" class="headerlink" title="2.1 NIO的缺点"></a>2.1 NIO的缺点</h2><p>对于这个问题，之前我写了一篇文章<span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvR2ZWOXcyQjBtYlQ3UG1lQlM0NXhMdw==">《NIO入门》<i class="fa fa-external-link-alt"></i></span>对NIO有比较详细的介绍，NIO的主要问题是：</p>
<ul>
<li>NIO的类库和API繁杂，学习成本高，你需要熟练掌握Selector、ServerSocketChannel、SocketChannel、ByteBuffer等。</li>
<li>需要熟悉Java多线程编程。这是因为NIO编程涉及到Reactor模式，你必须对多线程和网络编程非常熟悉，才能写出高质量的NIO程序。</li>
<li>臭名昭著的epoll bug。它会导致Selector空轮询，最终导致CPU 100%。直到JDK1.7版本依然没得到根本性的解决。</li>
</ul>
<h2 id="2-2-Netty的优点"><a href="#2-2-Netty的优点" class="headerlink" title="2.2 Netty的优点"></a>2.2 Netty的优点</h2><p>相对地，Netty的优点有很多：</p>
<ul>
<li>API使用简单，学习成本低。</li>
<li>功能强大，内置了多种解码编码器，支持多种协议。</li>
<li>性能高，对比其他主流的NIO框架，Netty的性能最优。</li>
<li>社区活跃，发现BUG会及时修复，迭代版本周期短，不断加入新的功能。</li>
<li>Dubbo、Elasticsearch都采用了Netty，质量得到验证。</li>
</ul>
<h1 id="三、架构图"><a href="#三、架构图" class="headerlink" title="三、架构图"></a>三、架构图</h1><p><img data-src="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/15944ade0142471399997efd68e52948.png" alt="image.png"></p>
<p>上面这张图就是在官网首页的架构图，我们从上到下分析一下。</p>
<blockquote>
<p>绿色的部分<strong>Core</strong>核心模块，包括零拷贝、API库、可扩展的事件模型。</p>
<p>橙色部分<strong>Protocol Support</strong>协议支持，包括Http协议、webSocket、SSL(安全套接字协议)、谷歌Protobuf协议、zlib&#x2F;gzip压缩与解压缩、Large File Transfer大文件传输等等。</p>
<p>红色的部分<strong>Transport Services</strong>传输服务，包括Socket、Datagram、Http Tunnel等等。</p>
</blockquote>
<p>以上可看出Netty的功能、协议、传输方式都比较全，比较强大。</p>
<h1 id="四、永远的Hello-Word"><a href="#四、永远的Hello-Word" class="headerlink" title="四、永远的Hello Word"></a>四、永远的Hello Word</h1><p>首先搭建一个HelloWord工程，先熟悉一下API，还有为后面的学习做铺垫。以下面这张图为依据：</p>
<p><img data-src="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/cc27d56addd74e82b6b6b349c7f3769b.png" alt="image.png"></p>
<h2 id="4-1-引入Maven依赖"><a href="#4-1-引入Maven依赖" class="headerlink" title="4.1 引入Maven依赖"></a>4.1 引入Maven依赖</h2><p>使用的版本是4.1.20，相对比较稳定的一个版本。</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.netty&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;netty-all&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.1.20.Final&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h2 id="4-2-创建服务端启动类"><a href="#4-2-创建服务端启动类" class="headerlink" title="4.2 创建服务端启动类"></a>4.2 创建服务端启动类</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class MyServer &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        //创建两个线程组 boosGroup、workerGroup</span><br><span class="line">        EventLoopGroup bossGroup = new NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workerGroup = new NioEventLoopGroup();</span><br><span class="line">        try &#123;</span><br><span class="line">            //创建服务端的启动对象，设置参数</span><br><span class="line">            ServerBootstrap bootstrap = new ServerBootstrap();</span><br><span class="line">            //设置两个线程组boosGroup和workerGroup</span><br><span class="line">            bootstrap.group(bossGroup, workerGroup)</span><br><span class="line">                //设置服务端通道实现类型    </span><br><span class="line">                .channel(NioServerSocketChannel.class)</span><br><span class="line">                //设置线程队列得到连接个数    </span><br><span class="line">                .option(ChannelOption.SO_BACKLOG, 128)</span><br><span class="line">                //设置保持活动连接状态    </span><br><span class="line">                .childOption(ChannelOption.SO_KEEPALIVE, true)</span><br><span class="line">                //使用匿名内部类的形式初始化通道对象    </span><br><span class="line">                .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        protected void initChannel(SocketChannel socketChannel) throws Exception &#123;</span><br><span class="line">                            //给pipeline管道设置处理器</span><br><span class="line">                            socketChannel.pipeline().addLast(new MyServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);//给workerGroup的EventLoop对应的管道设置处理器</span><br><span class="line">            System.out.println(&quot;java技术爱好者的服务端已经准备就绪...&quot;);</span><br><span class="line">            //绑定端口号，启动服务端</span><br><span class="line">            ChannelFuture channelFuture = bootstrap.bind(6666).sync();</span><br><span class="line">            //对关闭通道进行监听</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-3-创建服务端处理器"><a href="#4-3-创建服务端处理器" class="headerlink" title="4.3 创建服务端处理器"></a>4.3 创建服务端处理器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 自定义的Handler需要继承Netty规定好的HandlerAdapter</span><br><span class="line"> * 才能被Netty框架所关联，有点类似SpringMVC的适配器模式</span><br><span class="line"> **/</span><br><span class="line">public class MyServerHandler extends ChannelInboundHandlerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123;</span><br><span class="line">        //获取客户端发送过来的消息</span><br><span class="line">        ByteBuf byteBuf = (ByteBuf) msg;</span><br><span class="line">        System.out.println(&quot;收到客户端&quot; + ctx.channel().remoteAddress() + &quot;发送的消息：&quot; + byteBuf.toString(CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">        //发送消息给客户端</span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(&quot;服务端已收到消息，并给你发送一个问号?&quot;, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception &#123;</span><br><span class="line">        //发生异常，关闭通道</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-4-创建客户端启动类"><a href="#4-4-创建客户端启动类" class="headerlink" title="4.4 创建客户端启动类"></a>4.4 创建客户端启动类</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class MyClient &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        NioEventLoopGroup eventExecutors = new NioEventLoopGroup();</span><br><span class="line">        try &#123;</span><br><span class="line">            //创建bootstrap对象，配置参数</span><br><span class="line">            Bootstrap bootstrap = new Bootstrap();</span><br><span class="line">            //设置线程组</span><br><span class="line">            bootstrap.group(eventExecutors)</span><br><span class="line">                //设置客户端的通道实现类型    </span><br><span class="line">                .channel(NioSocketChannel.class)</span><br><span class="line">                //使用匿名内部类初始化通道</span><br><span class="line">                .handler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class="line">                            //添加客户端通道的处理器</span><br><span class="line">                            ch.pipeline().addLast(new MyClientHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            System.out.println(&quot;客户端准备就绪，随时可以起飞~&quot;);</span><br><span class="line">            //连接服务端</span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(&quot;127.0.0.1&quot;, 6666).sync();</span><br><span class="line">            //对通道关闭进行监听</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            //关闭线程组</span><br><span class="line">            eventExecutors.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-5-创建客户端处理器"><a href="#4-5-创建客户端处理器" class="headerlink" title="4.5 创建客户端处理器"></a>4.5 创建客户端处理器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class MyClientHandler extends ChannelInboundHandlerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">        //发送消息到服务端</span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(&quot;歪比巴卜~茉莉~Are you good~马来西亚~&quot;, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123;</span><br><span class="line">        //接收服务端发送过来的消息</span><br><span class="line">        ByteBuf byteBuf = (ByteBuf) msg;</span><br><span class="line">        System.out.println(&quot;收到服务端&quot; + ctx.channel().remoteAddress() + &quot;的消息：&quot; + byteBuf.toString(CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-6-测试"><a href="#4-6-测试" class="headerlink" title="4.6 测试"></a>4.6 测试</h2><p>先启动服务端，再启动客户端，就可以看到结果：</p>
<p>MyServer打印结果:</p>
<p><img data-src="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/92908e107d6a487bb930ab6cd6be269f.png" alt="image.png"></p>
<p>MyClient打印结果：<br><img data-src="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/419e8af300b24c9eaed71a76ddc2ddeb.png" alt="image.png"></p>
<h1 id="五、Netty的特性与重要组件"><a href="#五、Netty的特性与重要组件" class="headerlink" title="五、Netty的特性与重要组件"></a>五、Netty的特性与重要组件</h1><h2 id="5-1-taskQueue任务队列"><a href="#5-1-taskQueue任务队列" class="headerlink" title="5.1 taskQueue任务队列"></a>5.1 taskQueue任务队列</h2><p>如果Handler处理器有一些长时间的业务处理，可以交给<strong>taskQueue异步处理</strong>。怎么用呢，请看代码演示：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class MyServerHandler extends ChannelInboundHandlerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123;</span><br><span class="line">        //获取到线程池eventLoop，添加线程，执行</span><br><span class="line">        ctx.channel().eventLoop().execute(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    //长时间操作，不至于长时间的业务操作导致Handler阻塞</span><br><span class="line">                    Thread.sleep(1000);</span><br><span class="line">                    System.out.println(&quot;长时间的业务处理&quot;);</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们打一个debug调试，是可以看到添加进去的taskQueue有一个任务。</p>
<p><img data-src="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/23835a6ae2374897bf28a0b70fce9cc8.png" alt="image.png"></p>
<h2 id="5-2-scheduleTaskQueue延时任务队列"><a href="#5-2-scheduleTaskQueue延时任务队列" class="headerlink" title="5.2 scheduleTaskQueue延时任务队列"></a>5.2 scheduleTaskQueue延时任务队列</h2><p>延时任务队列和上面介绍的任务队列非常相似，只是多了一个可延迟一定时间再执行的设置，请看代码演示：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ctx.channel().eventLoop().schedule(new Runnable() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //长时间操作，不至于长时间的业务操作导致Handler阻塞</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">            System.out.println(&quot;长时间的业务处理&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,5, TimeUnit.SECONDS);//5秒后执行</span><br></pre></td></tr></table></figure>

<p>依然打开debug进行调试查看，我们可以有一个scheduleTaskQueue任务待执行中</p>
<p><img data-src="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/173194f21adfa111" alt="img"></p>
<h2 id="5-3-Future异步机制"><a href="#5-3-Future异步机制" class="headerlink" title="5.3 Future异步机制"></a>5.3 Future异步机制</h2><p>在搭建HelloWord工程的时候，我们看到有一行这样的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ChannelFuture channelFuture = bootstrap.connect(&quot;127.0.0.1&quot;, 6666);</span><br></pre></td></tr></table></figure>

<p>很多操作都返回这个ChannelFuture对象，究竟这个ChannelFuture对象是用来做什么的呢？</p>
<p>ChannelFuture提供操作完成时一种异步通知的方式。一般在Socket编程中，等待响应结果都是同步阻塞的，而Netty则不会造成阻塞，因为ChannelFuture是采取类似观察者模式的形式进行获取结果。请看一段代码演示：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//添加监听器</span><br><span class="line">channelFuture.addListener(new ChannelFutureListener() &#123;</span><br><span class="line">    //使用匿名内部类，ChannelFutureListener接口</span><br><span class="line">    //重写operationComplete方法</span><br><span class="line">    @Override</span><br><span class="line">    public void operationComplete(ChannelFuture future) throws Exception &#123;</span><br><span class="line">        //判断是否操作成功    </span><br><span class="line">        if (future.isSuccess()) &#123;</span><br><span class="line">            System.out.println(&quot;连接成功&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.println(&quot;连接失败&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="5-4-Bootstrap与ServerBootStrap"><a href="#5-4-Bootstrap与ServerBootStrap" class="headerlink" title="5.4 Bootstrap与ServerBootStrap"></a>5.4 Bootstrap与ServerBootStrap</h2><p>Bootstrap和ServerBootStrap是Netty提供的一个创建客户端和服务端启动器的工厂类，使用这个工厂类非常便利地创建启动类，根据上面的一些例子，其实也看得出来能大大地减少了开发的难度。首先看一个类图：</p>
<p><img data-src="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/40cf762660d9455eb6066119cf5eeb49.png" alt="image.png"></p>
<p>可以看出都是继承于AbstractBootStrap抽象类，所以大致上的配置方法都相同。</p>
<p>一般来说，使用Bootstrap创建启动器的步骤可分为以下几步：</p>
<p><img data-src="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/ae5c6ed3008d4323aaa817e9cb46437a.png" alt="image.png"></p>
<h3 id="5-4-1-group"><a href="#5-4-1-group" class="headerlink" title="5.4.1 group()"></a>5.4.1 group()</h3><p>在上一篇文章<span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvdldiYm4xcVhSRlZ2YThZOXlFVDE4UQ==">《Reactor模式》<i class="fa fa-external-link-alt"></i></span>中，我们就讲过服务端要使用两个线程组：</p>
<ul>
<li>bossGroup 用于监听客户端连接，专门负责与客户端创建连接，并把连接注册到workerGroup的Selector中。</li>
<li>workerGroup用于处理每一个连接发生的读写事件。</li>
</ul>
<p>一般创建线程组直接使用以下new就完事了：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EventLoopGroup bossGroup = new NioEventLoopGroup();</span><br><span class="line">EventLoopGroup workerGroup = new NioEventLoopGroup();</span><br></pre></td></tr></table></figure>

<p>有点好奇的是，既然是线程组，那线程数默认是多少呢？深入源码：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//使用一个常量保存</span><br><span class="line">private static final int DEFAULT_EVENT_LOOP_THREADS;</span><br><span class="line"></span><br><span class="line">static &#123;</span><br><span class="line">    //NettyRuntime.availableProcessors() * 2，cpu核数的两倍赋值给常量</span><br><span class="line">    DEFAULT_EVENT_LOOP_THREADS = Math.max(1, SystemPropertyUtil.getInt(</span><br><span class="line">            &quot;io.netty.eventLoopThreads&quot;, NettyRuntime.availableProcessors() * 2));</span><br><span class="line"></span><br><span class="line">    if (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(&quot;-Dio.netty.eventLoopThreads: &#123;&#125;&quot;, DEFAULT_EVENT_LOOP_THREADS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected MultithreadEventLoopGroup(int nThreads, Executor executor, Object... args) &#123;</span><br><span class="line">    //如果不传入，则使用常量的值，也就是cpu核数的两倍</span><br><span class="line">    super(nThreads == 0 ? DEFAULT_EVENT_LOOP_THREADS : nThreads, executor, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过源码可以看到，默认的线程数是cpu核数的两倍。假设想自定义线程数，可以使用有参构造器：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//设置bossGroup线程数为1</span><br><span class="line">EventLoopGroup bossGroup = new NioEventLoopGroup(1);</span><br><span class="line">//设置workerGroup线程数为16</span><br><span class="line">EventLoopGroup workerGroup = new NioEventLoopGroup(16);</span><br></pre></td></tr></table></figure>

<h3 id="5-4-2-channel"><a href="#5-4-2-channel" class="headerlink" title="5.4.2 channel()"></a>5.4.2 channel()</h3><p>这个方法用于设置通道类型，当建立连接后，会根据这个设置创建对应的Channel实例。</p>
<p><img data-src="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/1731951ae3c43228" alt="img"></p>
<p>使用debug模式可以看到</p>
<p><img data-src="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/1731951f80b07785" alt="img"></p>
<p>通道类型有以下：</p>
<p><strong>NioSocketChannel</strong>： 异步非阻塞的客户端 TCP Socket 连接。</p>
<p><strong>NioServerSocketChannel</strong>： 异步非阻塞的服务器端 TCP Socket 连接。</p>
<blockquote>
<p>常用的就是这两个通道类型，因为是异步非阻塞的。所以是首选。</p>
</blockquote>
<p>OioSocketChannel： 同步阻塞的客户端 TCP Socket 连接。</p>
<p>OioServerSocketChannel： 同步阻塞的服务器端 TCP Socket 连接。</p>
<blockquote>
<p>稍微在本地调试过，用起来和Nio有一些不同，是阻塞的，所以API调用也不一样。因为是阻塞的IO，几乎没什么人会选择使用Oio，所以也很难找到例子。我稍微琢磨了一下，经过几次报错之后，总算调通了。代码如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//server端代码，跟上面几乎一样，只需改三个地方</span><br><span class="line">//这个地方使用的是OioEventLoopGroup</span><br><span class="line">EventLoopGroup bossGroup = new OioEventLoopGroup();</span><br><span class="line">ServerBootstrap bootstrap = new ServerBootstrap();</span><br><span class="line">bootstrap.group(bossGroup)//只需要设置一个线程组boosGroup</span><br><span class="line">        .channel(OioServerSocketChannel.class)//设置服务端通道实现类型</span><br><span class="line"></span><br><span class="line">//client端代码，只需改两个地方</span><br><span class="line">//使用的是OioEventLoopGroup</span><br><span class="line">EventLoopGroup eventExecutors = new OioEventLoopGroup();</span><br><span class="line">//通道类型设置为OioSocketChannel</span><br><span class="line">bootstrap.group(eventExecutors)//设置线程组</span><br><span class="line">        .channel(OioSocketChannel.class)//设置客户端的通道实现类型</span><br></pre></td></tr></table></figure>

<p>NioSctpChannel： 异步的客户端 Sctp（Stream Control Transmission Protocol，流控制传输协议）连接。</p>
<p>NioSctpServerChannel： 异步的 Sctp 服务器端连接。</p>
<blockquote>
<p>本地没启动成功，网上看了一些网友的评论，说是只能在linux环境下才可以启动。从报错信息看：SCTP not supported on this platform，不支持这个平台。因为我电脑是window系统，所以网友说的有点道理。</p>
</blockquote>
<h3 id="5-4-3-option-与childOption"><a href="#5-4-3-option-与childOption" class="headerlink" title="5.4.3 option()与childOption()"></a>5.4.3 option()与childOption()</h3><p>首先说一下这两个的区别。</p>
<p>option()设置的是服务端用于接收进来的连接，也就是boosGroup线程。</p>
<p>childOption()是提供给父管道接收到的连接，也就是workerGroup线程。</p>
<p>搞清楚了之后，我们看一下常用的一些设置有哪些：</p>
<p>SocketChannel参数，也就是childOption()常用的参数：</p>
<blockquote>
<p><strong>SO_RCVBUF</strong> Socket参数，TCP数据接收缓冲区大小。<br><strong>TCP_NODELAY</strong> TCP参数，立即发送数据，默认值为Ture。<br><strong>SO_KEEPALIVE</strong> Socket参数，连接保活，默认值为False。启用该功能时，TCP会主动探测空闲连接的有效性。</p>
</blockquote>
<p>ServerSocketChannel参数，也就是option()常用参数：</p>
<blockquote>
<p><strong>SO_BACKLOG</strong> Socket参数，服务端接受连接的队列长度，如果队列已满，客户端连接将被拒绝。默认值，Windows为200，其他为128。</p>
</blockquote>
<p>由于篇幅限制，其他就不列举了，大家可以去网上找资料看看，了解一下。</p>
<h3 id="5-4-4-设置流水线-重点"><a href="#5-4-4-设置流水线-重点" class="headerlink" title="5.4.4 设置流水线(重点)"></a>5.4.4 设置流水线(重点)</h3><p>ChannelPipeline是Netty处理请求的责任链，ChannelHandler则是具体处理请求的处理器。实际上每一个channel都有一个处理器的流水线。</p>
<p>在Bootstrap中childHandler()方法需要初始化通道，实例化一个ChannelInitializer，这时候需要重写initChannel()初始化通道的方法，装配流水线就是在这个地方进行。代码演示如下：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//使用匿名内部类的形式初始化通道对象</span><br><span class="line">bootstrap.childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void initChannel(SocketChannel socketChannel) throws Exception &#123;</span><br><span class="line">        //给pipeline管道设置自定义的处理器</span><br><span class="line">        socketChannel.pipeline().addLast(new MyServerHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>处理器Handler主要分为两种：</p>
<blockquote>
<p>ChannelInboundHandlerAdapter(入站处理器)、ChannelOutboundHandler(出站处理器)</p>
</blockquote>
<p>入站指的是数据从底层java NIO Channel到Netty的Channel。</p>
<p>出站指的是通过Netty的Channel来操作底层的java NIO Channel。</p>
<p><strong>ChannelInboundHandlerAdapter处理器常用的事件有</strong>：</p>
<ol>
<li>注册事件 fireChannelRegistered。</li>
<li>连接建立事件 fireChannelActive。</li>
<li>读事件和读完成事件 fireChannelRead、fireChannelReadComplete。</li>
<li>异常通知事件 fireExceptionCaught。</li>
<li>用户自定义事件 fireUserEventTriggered。</li>
<li>Channel 可写状态变化事件 fireChannelWritabilityChanged。</li>
<li>连接关闭事件 fireChannelInactive。</li>
</ol>
<p><strong>ChannelOutboundHandler处理器常用的事件有</strong>：</p>
<ol>
<li>端口绑定 bind。</li>
<li>连接服务端 connect。</li>
<li>写事件 write。</li>
<li>刷新时间 flush。</li>
<li>读事件 read。</li>
<li>主动断开连接 disconnect。</li>
<li>关闭 channel 事件 close。</li>
</ol>
<blockquote>
<p>还有一个类似的handler()，主要用于装配parent通道，也就是bossGroup线程。一般情况下，都用不上这个方法。</p>
</blockquote>
<h3 id="5-4-5-bind"><a href="#5-4-5-bind" class="headerlink" title="5.4.5 bind()"></a>5.4.5 bind()</h3><p>提供用于服务端或者客户端绑定服务器地址和端口号，默认是异步启动。如果加上sync()方法则是同步。</p>
<p>有五个同名的重载方法，作用都是用于绑定地址端口号。不一一介绍了。</p>
<h3 id="5-4-6-优雅地关闭EventLoopGroup"><a href="#5-4-6-优雅地关闭EventLoopGroup" class="headerlink" title="5.4.6 优雅地关闭EventLoopGroup"></a>5.4.6 优雅地关闭EventLoopGroup</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//释放掉所有的资源，包括创建的线程</span><br><span class="line">bossGroup.shutdownGracefully();</span><br><span class="line">workerGroup.shutdownGracefully();</span><br></pre></td></tr></table></figure>

<p>会关闭所有的child Channel。关闭之后，释放掉底层的资源。</p>
<h2 id="5-5-Channel"><a href="#5-5-Channel" class="headerlink" title="5.5 Channel"></a>5.5 Channel</h2><p>Channel是什么？不妨看一下官方文档的说明：</p>
<blockquote>
<p>A nexus to a network socket or a component which is capable of I&#x2F;O operations such as read, write, connect, and bind</p>
</blockquote>
<p>翻译大意：一种连接到网络套接字或能进行读、写、连接和绑定等I&#x2F;O操作的组件。</p>
<p>如果上面这段说明比较抽象，下面还有一段说明：</p>
<blockquote>
<p>A channel provides a user:</p>
<p>the current state of the channel (e.g. is it open? is it connected?),<br>the configuration parameters of the channel (e.g. receive buffer size),<br>the I&#x2F;O operations that the channel supports (e.g. read, write, connect, and bind), and<br>the ChannelPipeline which handles all I&#x2F;O events and requests associated with the channel.</p>
</blockquote>
<p>翻译大意：</p>
<p>channel为用户提供：</p>
<ol>
<li>通道当前的状态（例如它是打开？还是已连接？）</li>
<li>channel的配置参数（例如接收缓冲区的大小）</li>
<li>channel支持的IO操作（例如读、写、连接和绑定），以及处理与channel相关联的所有IO事件和请求的ChannelPipeline。</li>
</ol>
<h3 id="5-5-1-获取channel的状态"><a href="#5-5-1-获取channel的状态" class="headerlink" title="5.5.1 获取channel的状态"></a>5.5.1 获取channel的状态</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">boolean isOpen(); //如果通道打开，则返回true</span><br><span class="line">boolean isRegistered();//如果通道注册到EventLoop，则返回true</span><br><span class="line">boolean isActive();//如果通道处于活动状态并且已连接，则返回true</span><br><span class="line">boolean isWritable();//当且仅当I/O线程将立即执行请求的写入操作时，返回true。</span><br></pre></td></tr></table></figure>

<p>以上就是获取channel的四种状态的方法。</p>
<h3 id="5-5-2-获取channel的配置参数"><a href="#5-5-2-获取channel的配置参数" class="headerlink" title="5.5.2 获取channel的配置参数"></a>5.5.2 获取channel的配置参数</h3><p>获取单条配置信息，使用getOption()，代码演示：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ChannelConfig config = channel.config();//获取配置参数</span><br><span class="line">//获取ChannelOption.SO_BACKLOG参数,</span><br><span class="line">Integer soBackLogConfig = config.getOption(ChannelOption.SO_BACKLOG);</span><br><span class="line">//因为我启动器配置的是128，所以我这里获取的soBackLogConfig=128</span><br></pre></td></tr></table></figure>

<p>获取多条配置信息，使用getOptions()，代码演示：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ChannelConfig config = channel.config();</span><br><span class="line">Map&lt;ChannelOption&lt;?&gt;, Object&gt; options = config.getOptions();</span><br><span class="line">for (Map.Entry&lt;ChannelOption&lt;?&gt;, Object&gt; entry : options.entrySet()) &#123;</span><br><span class="line">    System.out.println(entry.getKey() + &quot; : &quot; + entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line">SO_REUSEADDR : false</span><br><span class="line">WRITE_BUFFER_LOW_WATER_MARK : 32768</span><br><span class="line">WRITE_BUFFER_WATER_MARK : WriteBufferWaterMark(low: 32768, high: 65536)</span><br><span class="line">SO_BACKLOG : 128</span><br><span class="line">以下省略...</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<h3 id="5-5-3-channel支持的IO操作"><a href="#5-5-3-channel支持的IO操作" class="headerlink" title="5.5.3 channel支持的IO操作"></a>5.5.3 channel支持的IO操作</h3><p><strong>写操作</strong>，这里演示从服务端写消息发送到客户端：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123;</span><br><span class="line">    ctx.channel().writeAndFlush(Unpooled.copiedBuffer(&quot;这波啊，这波是肉蛋葱鸡~&quot;, CharsetUtil.UTF_8));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端控制台：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//收到服务端/127.0.0.1:6666的消息：这波啊，这波是肉蛋葱鸡~</span><br></pre></td></tr></table></figure>

<p><strong>连接</strong>操作，代码演示：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ChannelFuture connect = channelFuture.channel().connect(new InetSocketAddress(&quot;127.0.0.1&quot;, 6666));//一般使用启动器，这种方式不常用</span><br></pre></td></tr></table></figure>

<p><strong>通过channel获取ChannelPipeline</strong>，并做相关的处理：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//获取ChannelPipeline对象</span><br><span class="line">ChannelPipeline pipeline = ctx.channel().pipeline();</span><br><span class="line">//往pipeline中添加ChannelHandler处理器，装配流水线</span><br><span class="line">pipeline.addLast(new MyServerHandler());</span><br></pre></td></tr></table></figure>

<h2 id="5-6-Selector"><a href="#5-6-Selector" class="headerlink" title="5.6 Selector"></a>5.6 Selector</h2><p>在NioEventLoop中，有一个成员变量selector，这是nio包的Selector，在之前<span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvR2ZWOXcyQjBtYlQ3UG1lQlM0NXhMdw==">《NIO入门》<i class="fa fa-external-link-alt"></i></span>中，我已经讲过Selector了。</p>
<p>Netty中的Selector也和NIO的Selector是一样的，就是用于监听事件，管理注册到Selector中的channel，实现多路复用器。</p>
<p><img data-src="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/5fa70ed04e234fad9e524b3766051c4a.png" alt="image.png"></p>
<h2 id="5-7-PiPeline与ChannelPipeline"><a href="#5-7-PiPeline与ChannelPipeline" class="headerlink" title="5.7 PiPeline与ChannelPipeline"></a>5.7 PiPeline与ChannelPipeline</h2><p>在前面介绍Channel时，我们知道可以在channel中装配ChannelHandler流水线处理器，那一个channel不可能只有一个channelHandler处理器，肯定是有很多的，既然是很多channelHandler在一个流水线工作，肯定是有顺序的。</p>
<p>于是pipeline就出现了，pipeline相当于处理器的容器。初始化channel时，把channelHandler按顺序装在pipeline中，就可以实现按序执行channelHandler了。</p>
<p><img data-src="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/e7bac501d86e4e75a897686d7bab40fe.png" alt="image.png"></p>
<p>在一个Channel中，只有一个ChannelPipeline。该pipeline在Channel被创建的时候创建。ChannelPipeline包含了一个ChannelHander形成的列表，且所有ChannelHandler都会注册到ChannelPipeline中。</p>
<h2 id="5-8-ChannelHandlerContext"><a href="#5-8-ChannelHandlerContext" class="headerlink" title="5.8 ChannelHandlerContext"></a>5.8 ChannelHandlerContext</h2><p>在Netty中，Handler处理器是有我们定义的，上面讲过通过集成入站处理器或者出站处理器实现。这时如果我们想在Handler中获取pipeline对象，或者channel对象，怎么获取呢。</p>
<p>于是Netty设计了这个ChannelHandlerContext上下文对象，就可以拿到channel、pipeline等对象，就可以进行读写等操作。</p>
<p><img data-src="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/4c6e9319213b489bbfcc2d7697cf03b0.png" alt="image.png"></p>
<p>通过类图，ChannelHandlerContext是一个接口，下面有三个实现类。</p>
<p>实际上ChannelHandlerContext在pipeline中是一个链表的形式。看一段源码就明白了：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//ChannelPipeline实现类DefaultChannelPipeline的构造器方法</span><br><span class="line">protected DefaultChannelPipeline(Channel channel) &#123;</span><br><span class="line">    this.channel = ObjectUtil.checkNotNull(channel, &quot;channel&quot;);</span><br><span class="line">    succeededFuture = new SucceededChannelFuture(channel, null);</span><br><span class="line">    voidPromise =  new VoidChannelPromise(channel, true);</span><br><span class="line">    //设置头结点head，尾结点tail</span><br><span class="line">    tail = new TailContext(this);</span><br><span class="line">    head = new HeadContext(this);</span><br><span class="line">    </span><br><span class="line">    head.next = tail;</span><br><span class="line">    tail.prev = head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面我用一张图来表示，会更加清晰一点：<br><img data-src="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/c77ea0ea4e554d65b61ee0a2eae78a0c.png" alt="image.png"></p>
<h2 id="5-9-EventLoopGroup"><a href="#5-9-EventLoopGroup" class="headerlink" title="5.9 EventLoopGroup"></a>5.9 EventLoopGroup</h2><p>我们先看一下EventLoopGroup的类图：</p>
<p><img data-src="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/7a95eeb933be4470acdc5f0f07afbc2a.png" alt="image.png"></p>
<p>其中包括了常用的实现类NioEventLoopGroup。OioEventLoopGroup在前面的例子中也有使用过。</p>
<p>从Netty的架构图中，可以知道服务器是需要两个线程组进行配合工作的，而这个线程组的接口就是EventLoopGroup。</p>
<p>每个EventLoopGroup里包括一个或多个EventLoop，每个EventLoop中维护一个Selector实例。</p>
<h3 id="5-9-1-轮询机制的实现原理"><a href="#5-9-1-轮询机制的实现原理" class="headerlink" title="5.9.1 轮询机制的实现原理"></a>5.9.1 轮询机制的实现原理</h3><p>我们不妨看一段DefaultEventExecutorChooserFactory的源码：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private final AtomicInteger idx = new AtomicInteger();</span><br><span class="line">private final EventExecutor[] executors;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public EventExecutor next() &#123;</span><br><span class="line">    //idx.getAndIncrement()相当于idx++，然后对任务长度取模</span><br><span class="line">    return executors[idx.getAndIncrement() &amp; executors.length - 1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码可以确定执行的方式是轮询机制，接下来debug调试一下：</p>
<p><img data-src="https://cdn.kayleh.top/gh/kayleh/cdn4/head-first-netty/17319554d4546047" alt="img"></p>
<p>它这里还有一个判断，如果线程数不是2的N次方，则采用取模算法实现。</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public EventExecutor next() &#123;</span><br><span class="line">    return executors[Math.abs(idx.getAndIncrement() % executors.length)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
    </div>

    
    
    

    <footer class="post-footer">
          

<div class="post-copyright">
<ul>
  <li class="post-copyright-author">
      <strong>Post author:  </strong>Kayleh
  </li>
  <li class="post-copyright-link">
      <strong>Post link: </strong>
      <a href="https://blog.kayleh.top/posts/Head-First-Netty" title="Head First Netty">https://blog.kayleh.top/posts/Head-First-Netty</a>
  </li>
  <li class="post-copyright-license">
      <strong>Copyright Notice:  </strong>All articles in this blog are licensed under <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzQuMC8="><i class="fab fa-fw fa-creative-commons"></i>BY-NC-SA</span> unless stating additionally.
  </li>
</ul>
</div>

          <div class="followme">
  <span>Welcome to my other publishing channels</span>

  <div class="social-list">

      <div class="social-item">
          <a target="_blank" class="social-link" href="/atom.xml">
            <span class="icon">
              <i class="fa fa-rss"></i>
            </span>

            <span class="label">RSS</span>
          </a>
      </div>
  </div>
</div>

          <div class="post-tags">
              <a href="/tags/frame/" rel="tag"><i class="fa fa-tag"></i> frame</a>
          </div>

        
  <div class="social-like a2a_kit a2a_kit_size_32 a2a_default_style">
    <a class="a2a_dd" target="_blank" rel="noopener" href="https://www.addtoany.com/share"></a>
      <a class="a2a_button_facebook"></a>
      <a class="a2a_button_twitter"></a>
  </div>

          <div class="post-nav">
            <div class="post-nav-item">
                <a href="/posts/spring-and-jwt" rel="prev" title="Spring and Jwt">
                  <i class="fa fa-angle-left"></i> Spring and Jwt
                </a>
            </div>
            <div class="post-nav-item">
                <a href="/posts/mybatis-cache" rel="next" title="mybatis-cache">
                  mybatis-cache <i class="fa fa-angle-right"></i>
                </a>
            </div>
          </div>
    </footer>
  </article>
</div>






    <div class="comments gitalk-container"></div>
</div>
  </main>

  <footer class="footer">
    <div class="footer-inner">

  <div class="copyright">
    &copy; 2019 – 
    <span itemprop="copyrightYear">2025</span>
    <span class="with-love">
      <i class="fa fa-heart"></i>
    </span>
    <span class="author" itemprop="copyrightHolder">true</span>
  </div>
<div class="busuanzi-count">
    <span class="post-meta-item" id="busuanzi_container_site_uv">
      <span class="post-meta-item-icon">
        <i class="fa fa-user"></i>
      </span>
      <span class="site-uv" title="Total Visitors">
        <span id="busuanzi_value_site_uv"></span>
      </span>
    </span>
    <span class="post-meta-item" id="busuanzi_container_site_pv">
      <span class="post-meta-item-icon">
        <i class="fa fa-eye"></i>
      </span>
      <span class="site-pv" title="Total Views">
        <span id="busuanzi_value_site_pv"></span>
      </span>
    </span>
</div>

    </div>
  </footer>

  
  <div class="toggle sidebar-toggle" role="button">
    <span class="toggle-line"></span>
    <span class="toggle-line"></span>
    <span class="toggle-line"></span>
  </div>
  <div class="sidebar-dimmer"></div>
  <div class="back-to-top" role="button" aria-label="Back to top">
    <i class="fa fa-arrow-up fa-lg"></i>
    <span>0%</span>
  </div>

<noscript>
  <div class="noscript-warning">Theme NexT works best with JavaScript enabled</div>
</noscript>


  
  <script size="300" alpha="0.6" zIndex="-1" src="https://cdnjs.cloudflare.com/ajax/libs/ribbon.js/1.0.2/ribbon.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js" integrity="sha256-XL2inqUJaslATFnHdJOi9GfQ60on8Wx1C2H8DYiN1xY=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/next-theme-pjax/0.6.0/pjax.min.js" integrity="sha256-vxLn1tSKWD4dqbMRyv940UYw4sXgMtYcK6reefzZrao=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/fancyapps-ui/5.0.31/fancybox/fancybox.umd.js" integrity="sha256-a+H7FYzJv6oU2hfsfDGM2Ohw/cR9v+hPfxHCLdmCrE8=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/medium-zoom/1.1.0/medium-zoom.min.js" integrity="sha256-ZgMyDAIYDYGxbcpJcfUnYwNevG/xi9OHKaR/8GK+jWc=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/lozad.js/1.16.0/lozad.min.js" integrity="sha256-mOFREFhqmHeQbXpK2lp4nA3qooVgACfh88fpJftLBbc=" crossorigin="anonymous"></script>
<script src="/js/comments.js"></script><script src="/js/utils.js"></script><script src="/js/motion.js"></script><script src="/js/sidebar.js"></script><script src="/js/next-boot.js"></script><script src="/js/pjax.js"></script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-generator-searchdb/1.4.1/search.js" integrity="sha256-1kfA5uHPf65M5cphT2dvymhkuyHPQp5A53EGZOnOLmc=" crossorigin="anonymous"></script>
<script src="/js/third-party/search/local-search.js"></script>
<script src="//code.tidio.co/dq5klo9ydptaxokj83vcwnusf63dogzr.js"></script>
<script src="/js/third-party/chat/tidio.js"></script>




  <script src="/js/third-party/fancybox.js"></script>

  <script src="/js/third-party/pace.js"></script>

  <script src="/js/third-party/addtoany.js"></script>

  
  <script data-pjax async src="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"></script>




  

  <script class="next-config" data-name="enableMath" type="application/json">false</script><script class="next-config" data-name="mathjax" type="application/json">{"enable":true,"tags":"ams","js":{"url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.2.2/es5/tex-mml-chtml.js","integrity":"sha256-MASABpB4tYktI2Oitl4t+78w/lyA+D7b/s9GEP0JOGI="}}</script>
<script src="/js/third-party/math/mathjax.js"></script>


<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/gitalk/1.8.0/gitalk.css" integrity="sha256-AJnUHL7dBv6PGaeyPQJcgQPDjt/Hn/PvYZde1iqfp8U=" crossorigin="anonymous">

<script class="next-config" data-name="gitalk" type="application/json">{"enable":true,"github_id":"Kayleh","repo":"kayleh.top.giscus","client_id":"Ov23liJZlhhVSuSynF9Q","client_secret":"d16c7023956f130d20927ad469dfe83295864094","admin_user":"Kayleh","distraction_free_mode":true,"proxy":"https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token","language":null,"js":{"url":"https://cdnjs.cloudflare.com/ajax/libs/gitalk/1.8.0/gitalk.min.js","integrity":"sha256-MVK9MGD/XJaGyIghSVrONSnoXoGh3IFxLw0zfvzpxR4="},"path_md5":"79dfbc244426614371a2cf912df648a1"}</script>
<script src="/js/third-party/comments/gitalk.js"></script>

</body>
</html>
