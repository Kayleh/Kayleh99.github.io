<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width">
<meta name="theme-color" content="#222" media="(prefers-color-scheme: light)">
<meta name="theme-color" content="#222" media="(prefers-color-scheme: dark)"><meta name="generator" content="Hexo 7.3.0">
<link rel="preconnect" href="https://cdnjs.cloudflare.com" crossorigin>
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/mygo.jpg">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/mygo.jpg">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">

<link rel="stylesheet" href="/css/main.css">



<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" integrity="sha256-dABdfBfUoC8vJUBOwGVdm8L9qlMWaHTIfXt+7GnZCIo=" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.1.1/animate.min.css" integrity="sha256-PR7ttpcvz8qrF57fur/yAx1qXMFJeJFiA6pSzWi0OIE=" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/fancyapps-ui/5.0.31/fancybox/fancybox.css" integrity="sha256-gkQVf8UKZgQ0HyuxL/VnacadJ+D2Kox2TCEBuNQg5+w=" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/pace/1.2.4/themes/blue/pace-theme-center-simple.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/pace/1.2.4/pace.min.js" integrity="sha256-gqd7YTjg/BtfqWSwsJOvndl0Bxc8gFImLEkXQT8+qj0=" crossorigin="anonymous"></script>

<script class="next-config" data-name="main" type="application/json">{"hostname":"blog.kayleh.top","root":"/","images":"/images","scheme":"Gemini","darkmode":true,"version":"8.22.0","exturl":true,"sidebar":{"position":"left","width_expanded":320,"width_dual_column":240,"display":"post","padding":18,"offset":12},"hljswrap":true,"copycode":{"enable":false,"style":null},"fold":{"enable":false,"height":500},"bookmark":{"enable":false,"color":"#222","save":"auto"},"mediumzoom":true,"lazyload":true,"pangu":false,"comments":{"style":"tabs","active":"gitalk","storage":true,"lazyload":true,"nav":null,"activeClass":"gitalk"},"stickytabs":false,"motion":{"enable":true,"async":false,"duration":200,"transition":{"menu_item":"fadeInDown","post_block":"fadeIn","post_header":"fadeInDown","post_body":"fadeInDown","coll_header":"fadeInLeft","sidebar":"fadeInUp"}},"i18n":{"placeholder":"Searching...","empty":"We didn't find any results for the search: ${query}","hits_time":"${hits} results found in ${time} ms","hits":"${hits} results found"}}</script><script src="/js/config.js"></script>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7457165067653912"
     crossorigin="anonymous"></script>
    <meta name="description" content="对文件的输入输出文件 程序文件。包括源程序文件，这种文件的内容是程序代码 数据文件。供程序运行时读写的数据">
<meta property="og:type" content="blog">
<meta property="og:title" content="file input and output">
<meta property="og:url" content="https://blog.kayleh.top/posts/file-input-and-output">
<meta property="og:site_name" content="Kayleh&#39;s Blog">
<meta property="og:description" content="对文件的输入输出文件 程序文件。包括源程序文件，这种文件的内容是程序代码 数据文件。供程序运行时读写的数据">
<meta property="og:locale" content="en_US">
<meta property="og:image" content="https://cdn.kayleh.top/gh/kayleh/cdn2/1183448-20200229114252989-978233196.png">
<meta property="article:published_time" content="2020-11-03T10:24:07.000Z">
<meta property="article:modified_time" content="2025-02-03T16:14:08.805Z">
<meta property="article:author" content="Kayleh">
<meta property="article:tag" content="C">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://cdn.kayleh.top/gh/kayleh/cdn2/1183448-20200229114252989-978233196.png">


<link rel="canonical" href="https://blog.kayleh.top/posts/file-input-and-output">


<script class="next-config" data-name="page" type="application/json">{"sidebar":"","isHome":false,"isPost":true,"lang":"en","comments":true,"permalink":"https://blog.kayleh.top/posts/file-input-and-output","path":"posts/file-input-and-output","title":"file input and output"}</script>

<script class="next-config" data-name="calendar" type="application/json">""</script>
<title>file input and output | Kayleh's Blog</title>
  




  <script>
    (function(c,l,a,r,i,t,y){
        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};
        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;
        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);
    })(window, document, "clarity", "script", "q44a4p85n0");
</script>




  <noscript>
    <link rel="stylesheet" href="/css/noscript.css">
  </noscript>
</head>

<body itemscope itemtype="http://schema.org/WebPage" class="use-motion">
  <div class="headband"></div>

  <main class="main">
    <div class="column">
      <header class="header" itemscope itemtype="http://schema.org/WPHeader"><div class="site-brand-container">
  <div class="site-nav-toggle">
    <div class="toggle" aria-label="Toggle navigation bar" role="button">
        <span class="toggle-line"></span>
        <span class="toggle-line"></span>
        <span class="toggle-line"></span>
    </div>
  </div>

  <div class="site-meta">

    <a href="/" class="brand" rel="start">
      <i class="logo-line"></i>
      <p class="site-title">Kayleh's Blog</p>
      <i class="logo-line"></i>
    </a>
  </div>

  <div class="site-nav-right">
    <div class="toggle popup-trigger" aria-label="Search" role="button">
        <i class="fa fa-search fa-fw fa-lg"></i>
    </div>
  </div>
</div>



<nav class="site-nav">
  <ul class="main-menu menu"><li class="menu-item menu-item-home"><a href="/" rel="section"><i class="fa fa-home fa-fw"></i>Home</a></li><li class="menu-item menu-item-archives"><a href="/archives/" rel="section"><i class="fa fa-archive fa-fw"></i>Archives<span class="badge">247</span></a></li><li class="menu-item menu-item-about"><a href="/about/" rel="section"><i class="fa fa-user fa-fw"></i>About</a></li><li class="menu-item menu-item-tags"><a href="/tags/" rel="section"><i class="fa fa-tags fa-fw"></i>Tags<span class="badge">34</span></a></li><li class="menu-item menu-item-friends"><a href="/friends" rel="section"><i class="fa fa-heartbeat fa-fw"></i>friends</a></li><li class="menu-item menu-item-sitemap"><a href="/rss.xml" rel="section"><i class="fa fa-sitemap fa-fw"></i>Sitemap</a></li>
      <li class="menu-item menu-item-search">
        <a role="button" class="popup-trigger"><i class="fa fa-search fa-fw"></i>Search
        </a>
      </li>
  </ul>
</nav>



  <div class="search-pop-overlay">
    <div class="popup search-popup">
      <div class="search-header">
        <span class="search-icon">
          <i class="fa fa-search"></i>
        </span>
        <div class="search-input-container">
          <input autocomplete="off" autocapitalize="off" maxlength="80"
                placeholder="Searching..." spellcheck="false"
                type="search" class="search-input">
        </div>
        <span class="popup-btn-close" role="button">
          <i class="fa fa-times-circle"></i>
        </span>
      </div>
      <div class="search-result-container">
        <div class="search-result-icon">
          <i class="fa fa-spinner fa-pulse fa-5x"></i>
        </div>
      </div>
    </div>
  </div>

</header>
        
  
  <aside class="sidebar">

    <div class="sidebar-inner sidebar-nav-active sidebar-toc-active">
      <ul class="sidebar-nav">
        <li class="sidebar-nav-toc">
          Table of Contents
        </li>
        <li class="sidebar-nav-overview">
          Overview
        </li>
      </ul>

      <div class="sidebar-panel-container">
        <!--noindex-->
        <div class="post-toc-wrap sidebar-panel">
            <div class="post-toc animated"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#%E5%AF%B9%E6%96%87%E4%BB%B6%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA"><span class="nav-number">1.</span> <span class="nav-text">对文件的输入输出</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#%E6%96%87%E4%BB%B6"><span class="nav-number">1.1.</span> <span class="nav-text">文件</span></a><ol class="nav-child"><li class="nav-item nav-level-4"><a class="nav-link" href="#%E6%B5%81-%E6%95%B0%E6%8D%AE%E6%B5%81"><span class="nav-number">1.1.0.1.</span> <span class="nav-text">流(数据流)</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#%E6%96%87%E4%BB%B6%E5%90%8D"><span class="nav-number">1.1.0.2.</span> <span class="nav-text">文件名</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#%E6%96%87%E4%BB%B6%E7%9A%84%E5%88%86%E7%B1%BB"><span class="nav-number">1.1.0.3.</span> <span class="nav-text">文件的分类</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#%E6%96%87%E4%BB%B6%E7%BC%93%E5%86%B2%E5%8C%BA"><span class="nav-number">1.1.0.4.</span> <span class="nav-text">文件缓冲区</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E6%8C%87%E9%92%88"><span class="nav-number">1.1.0.5.</span> <span class="nav-text">文件类型指针</span></a></li></ol></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E6%89%93%E5%BC%80%E4%B8%8E%E5%85%B3%E9%97%AD%E6%96%87%E4%BB%B6"><span class="nav-number">1.2.</span> <span class="nav-text">打开与关闭文件</span></a><ol class="nav-child"><li class="nav-item nav-level-4"><a class="nav-link" href="#%E7%94%A8fopen%E5%87%BD%E6%95%B0%E6%89%93%E5%BC%80%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6"><span class="nav-number">1.2.0.1.</span> <span class="nav-text">用fopen函数打开数据文件</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#%E4%BD%BF%E7%94%A8%E6%96%87%E4%BB%B6%E6%96%B9%E5%BC%8F"><span class="nav-number">1.2.0.2.</span> <span class="nav-text">使用文件方式.</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#%E7%94%A8fclose%E5%87%BD%E6%95%B0%E5%85%B3%E9%97%AD%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6"><span class="nav-number">1.2.0.3.</span> <span class="nav-text">用fclose函数关闭数据文件</span></a></li></ol></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E9%A1%BA%E5%BA%8F%E8%AF%BB%E5%86%99%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6"><span class="nav-number">1.3.</span> <span class="nav-text">顺序读写数据文件</span></a><ol class="nav-child"><li class="nav-item nav-level-4"><a class="nav-link" href="#%E6%80%8E%E6%A0%B7%E5%90%91%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E5%AD%97%E7%AC%A6"><span class="nav-number">1.3.0.1.</span> <span class="nav-text">怎样向文件读写字符</span></a><ol class="nav-child"><li class="nav-item nav-level-5"><a class="nav-link" href="#%E4%BB%8E%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E4%B8%80%E4%BA%9B%E5%AD%97%E7%AC%A6-%E5%B9%B6%E9%80%90%E4%B8%AA%E6%8A%8A%E5%AE%83%E4%BB%AC%E9%80%81%E5%88%B0%E7%A3%81%E7%9B%98%E4%B8%8A%E5%8E%BB-%E7%9B%B4%E5%88%B0%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AA%E2%80%9D-%E2%80%9D%E4%B8%BA%E6%AD%A2"><span class="nav-number">1.3.0.1.1.</span> <span class="nav-text">从键盘输入一些字符,并逐个把它们送到磁盘上去,直到用户输入一个”#”为止.</span></a></li><li class="nav-item nav-level-5"><a class="nav-link" href="#%E5%B0%86%E4%B8%80%E4%B8%AA%E7%A3%81%E7%9B%98%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E5%A4%8D%E5%88%B6%E5%88%B0%E5%8F%A6%E4%B8%80%E4%B8%AA%E7%A3%81%E7%9B%98%E6%96%87%E4%BB%B6%E4%B8%AD"><span class="nav-number">1.3.0.1.2.</span> <span class="nav-text">将一个磁盘文件中的信息复制到另一个磁盘文件中</span></a></li></ol></li><li class="nav-item nav-level-4"><a class="nav-link" href="#%E6%80%8E%E6%A0%B7%E5%90%91%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2"><span class="nav-number">1.3.0.2.</span> <span class="nav-text">怎样向文件读写一个字符串</span></a><ol class="nav-child"><li class="nav-item nav-level-5"><a class="nav-link" href="#%E4%BB%8E%E9%94%AE%E7%9B%98%E8%AF%BB%E5%85%A5%E8%8B%A5%E5%B9%B2%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2-%E5%AF%B9%E5%AE%83%E4%BB%AC%E6%8C%89%E5%AD%97%E6%AF%8D%E5%A4%A7%E5%B0%8F%E7%9A%84%E9%A1%BA%E5%BA%8F%E6%8E%92%E5%BA%8F-%E7%84%B6%E5%90%8E%E6%8A%8A%E6%8E%92%E5%A5%BD%E5%BA%8F%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%81%E5%88%B0%E7%A3%81%E7%9B%98%E6%96%87%E4%BB%B6%E4%B8%AD%E4%BF%9D%E5%AD%98"><span class="nav-number">1.3.0.2.1.</span> <span class="nav-text">从键盘读入若干个字符串,对它们按字母大小的顺序排序,然后把排好序的字符串送到磁盘文件中保存.</span></a></li></ol></li><li class="nav-item nav-level-4"><a class="nav-link" href="#%E7%94%A8%E6%A0%BC%E5%BC%8F%E5%8C%96%E7%9A%84%E6%96%B9%E5%BC%8F%E8%AF%BB%E5%86%99%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6"><span class="nav-number">1.3.0.3.</span> <span class="nav-text">用格式化的方式读写文本文件</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#%E7%94%A8%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%B9%E5%BC%8F%E5%90%91%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E4%B8%80%E7%BB%84%E6%95%B0%E6%8D%AE"><span class="nav-number">1.3.0.4.</span> <span class="nav-text">用二进制方式向文件读写一组数据</span></a><ol class="nav-child"><li class="nav-item nav-level-5"><a class="nav-link" href="#%E4%BB%8E%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A510%E4%B8%AA%E5%AD%A6%E7%94%9F%E7%9A%84%E6%9C%89%E5%85%B3%E6%95%B0%E6%8D%AE-%E7%84%B6%E5%90%8E%E6%8A%8A%E5%AE%83%E4%BB%AC%E8%BD%AC%E5%AD%98%E5%88%B0%E7%A3%81%E7%9B%98%E6%96%87%E4%BB%B6%E4%B8%8A"><span class="nav-number">1.3.0.4.1.</span> <span class="nav-text">从键盘输入10个学生的有关数据,然后把它们转存到磁盘文件上.</span></a></li></ol></li><li class="nav-item nav-level-4"><a class="nav-link" href="#%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E5%92%8C%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6"><span class="nav-number">1.3.0.5.</span> <span class="nav-text">文本文件和二进制文件</span></a></li></ol></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E9%9A%8F%E6%9C%BA%E8%AF%BB%E5%86%99%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6"><span class="nav-number">1.4.</span> <span class="nav-text">随机读写数据文件</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE%E6%A0%87%E8%AE%B0%E5%8F%8A%E5%85%B6%E5%AE%9A%E4%BD%8D"><span class="nav-number">1.4.1.</span> <span class="nav-text">文件位置标记及其定位</span></a><ol class="nav-child"><li class="nav-item nav-level-4"><a class="nav-link" href="#%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE%E6%A0%87%E8%AE%B0"><span class="nav-number">1.4.1.1.</span> <span class="nav-text">文件位置标记</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE%E6%A0%87%E8%AE%B0%E7%9A%84%E5%AE%9A%E4%BD%8D"><span class="nav-number">1.4.1.2.</span> <span class="nav-text">文件位置标记的定位</span></a><ol class="nav-child"><li class="nav-item nav-level-5"><a class="nav-link" href="#%E6%9C%89%E4%B8%80%E4%B8%AA%E7%A3%81%E7%9B%98%E6%96%87%E4%BB%B6-%E5%86%85%E6%9C%89%E4%B8%80%E4%BA%9B%E4%BF%A1%E6%81%AF-%E8%A6%81%E6%B1%82%E7%AC%AC1%E6%AC%A1%E5%B0%86%E5%AE%83%E7%9A%84%E5%86%85%E5%AE%B9%E6%98%BE%E7%A4%BA%E5%9C%A8%E5%B1%8F%E5%B9%95%E4%B8%8A-%E7%AC%AC2%E6%AC%A1%E6%8A%8A%E5%AE%83%E5%A4%8D%E5%88%B6%E5%88%B0%E5%8F%A6%E4%B8%80%E6%96%87%E4%BB%B6%E4%B8%8A"><span class="nav-number">1.4.1.2.1.</span> <span class="nav-text">有一个磁盘文件,内有一些信息.要求第1次将它的内容显示在屏幕上,第2次把它复制到另一文件上.</span></a></li></ol></li><li class="nav-item nav-level-4"><a class="nav-link" href="#%E9%9A%8F%E6%9C%BA%E8%AF%BB%E5%86%99"><span class="nav-number">1.4.1.3.</span> <span class="nav-text">随机读写</span></a><ol class="nav-child"><li class="nav-item nav-level-5"><a class="nav-link" href="#%E5%9C%A8%E7%A3%81%E7%9B%98%E6%96%87%E4%BB%B6%E4%B8%8A%E5%AD%98%E6%9C%8910%E4%B8%AA%E5%AD%A6%E7%94%9F%E7%9A%84%E6%95%B0%E6%8D%AE-%E8%A6%81%E6%B1%82%E5%B0%86%E7%AC%AC1-3-5-7-9%E4%B8%AA%E5%AD%A6%E7%94%9F%E6%95%B0%E6%8D%AE%E8%BE%93%E5%85%A5%E8%AE%A1%E7%AE%97%E6%9C%BA-%E5%B9%B6%E5%9C%A8%E5%B1%8F%E5%B9%95%E4%B8%8A%E6%98%BE%E7%A4%BA%E5%87%BA%E6%9D%A5"><span class="nav-number">1.4.1.3.1.</span> <span class="nav-text">在磁盘文件上存有10个学生的数据.要求将第1,3,5,7,9个学生数据输入计算机,并在屏幕上显示出来.</span></a></li></ol></li></ol></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E7%9A%84%E5%87%BA%E9%94%99%E6%A3%80%E6%B5%8B"><span class="nav-number">1.5.</span> <span class="nav-text">文件读写的出错检测</span></a></li></ol></li></ol></div>
        </div>
        <!--/noindex-->

        <div class="site-overview-wrap sidebar-panel">
          <div class="site-author animated" itemprop="author" itemscope itemtype="http://schema.org/Person">
    <img class="site-author-image" itemprop="image" alt="Kayleh"
      src="/images/mygo.jpg">
  <p class="site-author-name" itemprop="name">Kayleh</p>
  <div class="site-description" itemprop="description"></div>
</div>
<div class="site-state-wrap animated">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
        <a href="/archives/">
          <span class="site-state-item-count">247</span>
          <span class="site-state-item-name">posts</span>
        </a>
      </div>
      <div class="site-state-item site-state-categories">
        <span class="site-state-item-count">5</span>
        <span class="site-state-item-name">categories</span>
      </div>
      <div class="site-state-item site-state-tags">
          <a href="/tags/">
        <span class="site-state-item-count">34</span>
        <span class="site-state-item-name">tags</span></a>
      </div>
  </nav>
</div>
  <div class="links-of-author animated">
      <span class="links-of-author-item">
        <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2theWxlaA==" title="GitHub → https:&#x2F;&#x2F;github.com&#x2F;kayleh"><i class="fab fa-github fa-fw"></i>GitHub</span>
      </span>
      <span class="links-of-author-item">
        <span class="exturl" data-url="bWFpbHRvOndlYnNpdGVAa2F5bGVoLnRvcA==" title="E-Mail → mailto:website@kayleh.top"><i class="fa fa-envelope fa-fw"></i>E-Mail</span>
      </span>
  </div>
  <div class="cc-license animated" itemprop="license">
    <span class="exturl cc-opacity" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzQuMC8="><img src="https://cdnjs.cloudflare.com/ajax/libs/creativecommons-vocabulary/2020.11.3/assets/license_badges/small/by_nc_sa.svg" alt="Creative Commons"></span>
  </div>

        </div>
      </div>
    </div>

    
  </aside>


    </div>

    <div class="main-inner post posts-expand">


  


<div class="post-block">
  
  

  <article itemscope itemtype="http://schema.org/Article" class="post-content" lang="en">
    <link itemprop="mainEntityOfPage" href="https://blog.kayleh.top/posts/file-input-and-output">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/mygo.jpg">
      <meta itemprop="name" content="Kayleh">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="Kayleh's Blog">
      <meta itemprop="description" content="">
    </span>

    <span hidden itemprop="post" itemscope itemtype="http://schema.org/CreativeWork">
      <meta itemprop="name" content="file input and output | Kayleh's Blog">
      <meta itemprop="description" content="">
    </span>
      <header class="post-header">
        <h1 class="post-title" itemprop="name headline">
          file input and output<span class="exturl post-edit-link" data-url="aHR0cHM6Ly9naXRodWIuY29tL2theWxlaC9rYXlsZWguZ2l0aHViLmlvMi9lZGl0L21hc3Rlci9zb3VyY2UvX3Bvc3RzLzEwLmZpbGUtaW5wdXQtYW5kLW91dHB1dC5tZA==" title="Edit this post"><i class="fa fa-pen-nib"></i></span>
        </h1>

        <div class="post-meta-container">
          <div class="post-meta">
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-calendar"></i>
      </span>
      <span class="post-meta-item-text">Posted on</span>

      <time title="Created: 2020-11-03 18:24:07" itemprop="dateCreated datePublished" datetime="2020-11-03T18:24:07+08:00">2020-11-03</time>
    </span>
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-calendar-check"></i>
      </span>
      <span class="post-meta-item-text">Edited on</span>
      <time title="Modified: 2025-02-04 00:14:08" itemprop="dateModified" datetime="2025-02-04T00:14:08+08:00">2025-02-04</time>
    </span>

  
    <span class="post-meta-item" title="Views" id="busuanzi_container_page_pv">
      <span class="post-meta-item-icon">
        <i class="far fa-eye"></i>
      </span>
      <span class="post-meta-item-text">Views: </span>
      <span id="busuanzi_value_page_pv"></span>
    </span>
</div>

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody"><h1 id="对文件的输入输出"><a href="#对文件的输入输出" class="headerlink" title="对文件的输入输出"></a>对文件的输入输出</h1><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><ul>
<li><strong>程序文件</strong>。包括源程序文件，这种文件的内容是程序代码</li>
<li><strong>数据文件</strong>。供程序运行时读写的数据</li>
</ul>
<p>操作系统把各种设备都统一作为文件来处理。</p>
<p>文件一般指存储在外部介质上数据的集合。</p>
<h4 id="流-数据流"><a href="#流-数据流" class="headerlink" title="流(数据流)"></a>流(数据流)</h4><p>数据的输入输出.流表示了信息从源到目的地的流动.</p>
<h4 id="文件名"><a href="#文件名" class="headerlink" title="文件名"></a>文件名</h4><p>文件路径+文件名主干+文件后缀</p>
<h4 id="文件的分类"><a href="#文件的分类" class="headerlink" title="文件的分类"></a>文件的分类</h4><ul>
<li><strong>ASCII文件</strong>,在存储前需要转换,<strong>文本文件</strong></li>
<li><strong>二进制文件</strong>,存储在内存的数据的映象,不需要加以转换输出到外存,称为<strong>映像文件</strong>.</li>
</ul>
<h4 id="文件缓冲区"><a href="#文件缓冲区" class="headerlink" title="文件缓冲区"></a>文件缓冲区</h4><p><img data-src="https://cdn.kayleh.top/gh/kayleh/cdn2/1183448-20200229114252989-978233196.png"></p>
<p>ANSI C标准采用“缓冲文件系统”处理数据文件。</p>
<p>所谓缓冲文件系统是指系统自动地在内存区为程序中每一个正在使用的文件开辟一个文件缓冲区从内存向磁盘输出数据必须先送到内存中的缓冲区，装满缓冲区后才一起送到磁盘去。</p>
<p>如果从磁盘向计算机读入数据，则一次从磁盘文件将一批数据输入到内存缓冲区(充满缓冲区)，然后再从缓冲区逐个地将数据送到程序数据区(给程序变量) 。 </p>
<p>程序与磁盘之间交互，不是立即完成，系统或程序可根据需要设置缓冲区，以提高存取效率 </p>
<h4 id="文件类型指针"><a href="#文件类型指针" class="headerlink" title="文件类型指针"></a>文件类型指针</h4><p>对于操作系统而言,关键的概念是”<strong>文件指针</strong>”.每个被使用的文件都在内存中开辟一段存储单元,用来存放文件的有关信息.这些信息是保存在一个结构体变量中的.该结构体类型变量是由系统定义的,取名为FILE.有几个文件就建立几个这样的结构体变量,分别存放各文件的有关信息.同时返回对应的FILE结构指针.</p>
<p>FILE结构体类型在stdio.h文件中定义如下:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Typedef <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">short</span> level;            <span class="comment">//缓冲区”满”或”空”的程度//</span></span><br><span class="line">  <span class="type">unsigned</span> flags;         <span class="comment">//文件状态标志//</span></span><br><span class="line">  <span class="type">char</span> fd;               <span class="comment">//文件描述符//</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> hold;     <span class="comment">//如无缓冲区不读取字符//</span></span><br><span class="line">  <span class="type">short</span> bsize;            <span class="comment">//缓冲区大小//</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> *buffer;   <span class="comment">//数据缓冲区的位置//</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> *curp;    <span class="comment">//指针,当前指向//</span></span><br><span class="line">  <span class="type">unsigned</span> istemp;       <span class="comment">//临时文件,指示器//</span></span><br><span class="line">  <span class="type">short</span> token;           <span class="comment">//用于有效性检查//</span></span><br><span class="line">&#125;FILE;</span><br></pre></td></tr></table></figure>

<p>定义一个指向文件型数据的指针变量</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FILE *fp;</span><br></pre></td></tr></table></figure>

<p>可以使fp指向某一个文件的文件信息区(是一个结构体变量),通过该文件信息区中的信息就能够访问该文件.</p>
<p><strong>通过文件指针变量能够找到与它关联的文件</strong>,如果有n个文件,应设n个指针变量,分别指向n个FILE类型变量,以实现对n个文件的访问.</p>
<p>通常将这种指向文件信息区的指针变量简称为<strong>指向文件的指针变量</strong></p>
<blockquote>
<p>并不是指向外部介质上的数据文件的开头,而是指向内存中的文件信息区的开头.</p>
</blockquote>
<h2 id="打开与关闭文件"><a href="#打开与关闭文件" class="headerlink" title="打开与关闭文件"></a>打开与关闭文件</h2><p>“打开”指为文件建立相应的信息区(用来存放有关文件的信息)和文件缓存区(用来暂时存放输入输出的数据).</p>
<p>打开文件的同时,一般指定一个指针变量指向该文件,建立起指针变量与文件之间的联系.</p>
<h4 id="用fopen函数打开数据文件"><a href="#用fopen函数打开数据文件" class="headerlink" title="用fopen函数打开数据文件"></a>用fopen函数打开数据文件</h4><p>fopen(文件名,使用文件方式)</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FILE *fp;</span><br><span class="line">fp=fopen(<span class="string">&quot;a1&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>实现失败返回NULL.</p>
<h4 id="使用文件方式"><a href="#使用文件方式" class="headerlink" title="使用文件方式."></a>使用文件方式.</h4><table>
<thead>
<tr>
<th>打开方式</th>
<th>含义</th>
<th>指定文件不存在时</th>
<th>指定文件存在时</th>
</tr>
</thead>
<tbody><tr>
<td>r</td>
<td>只读方式打开文本文件</td>
<td>出错</td>
<td>正常打开</td>
</tr>
<tr>
<td>w</td>
<td>只写方式打开文本文件</td>
<td>建立新文件</td>
<td>文件原有内容丢失</td>
</tr>
<tr>
<td>a</td>
<td>追加方式打开文本文件</td>
<td>建立新文件</td>
<td>在原有内容末尾追加</td>
</tr>
<tr>
<td>r+</td>
<td>读&#x2F;写方式打开文本文件</td>
<td>出错</td>
<td>正常打开</td>
</tr>
<tr>
<td>w+</td>
<td>读&#x2F;写方式创建新的文本文件</td>
<td>建立新文件</td>
<td>文件原有内容丢失</td>
</tr>
<tr>
<td>a+</td>
<td>读&#x2F;追加方式建立新的文本文件</td>
<td>建立新文件</td>
<td>在原有内容末尾追加</td>
</tr>
<tr>
<td>rb</td>
<td>只读方式打开二进制文件</td>
<td>出错</td>
<td>正常打开</td>
</tr>
<tr>
<td>wb</td>
<td>只写方式打开二进制文件</td>
<td>建立新文件</td>
<td>文件原有内容丢失</td>
</tr>
<tr>
<td>ab</td>
<td>追加方式打开二进制文件</td>
<td>建立新文件</td>
<td>在原有内容末尾添加</td>
</tr>
<tr>
<td>rb+</td>
<td>读&#x2F;写方式打开二进制文件</td>
<td>出错</td>
<td>正常打开</td>
</tr>
<tr>
<td>wb+</td>
<td>读&#x2F;写方式创建新的二进制文件</td>
<td>建立新文件</td>
<td>文件原有内容丢失</td>
</tr>
<tr>
<td>ab+</td>
<td>读&#x2F;追加方式创建新的二进制文件</td>
<td>建立新文件</td>
<td>在原有内容末尾追加</td>
</tr>
</tbody></table>
<blockquote>
<p>带b区别在于换行的处理</p>
</blockquote>
<h4 id="用fclose函数关闭数据文件"><a href="#用fclose函数关闭数据文件" class="headerlink" title="用fclose函数关闭数据文件"></a>用fclose函数关闭数据文件</h4><p>fclose(文件指针);</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fclose(fp);</span><br></pre></td></tr></table></figure>

<p>先把缓冲区中的数据输出到磁盘文件,然后才撤销文件信息区.</p>
<h2 id="顺序读写数据文件"><a href="#顺序读写数据文件" class="headerlink" title="顺序读写数据文件"></a>顺序读写数据文件</h2><h4 id="怎样向文件读写字符"><a href="#怎样向文件读写字符" class="headerlink" title="怎样向文件读写字符"></a>怎样向文件读写字符</h4><p>读写一个字符的函数.</p>
<table>
<thead>
<tr>
<th>函数名</th>
<th>调用形式</th>
<th>功能</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>fgetc</td>
<td>fgetc(fp)</td>
<td>从fp指向的文件读入一个字符</td>
<td>读成功,带回所读的字符,失败了则返回文件结束标志EOF(即-1)</td>
</tr>
<tr>
<td>fputc</td>
<td>fputc(ch,fp)</td>
<td>把字符ch写到文件指针变量fp所指向的文件中</td>
<td>输出成功,返回值就是输出的字符,输出失败,则返回文件结束标志EOF(即-1)</td>
</tr>
</tbody></table>
<h5 id="从键盘输入一些字符-并逐个把它们送到磁盘上去-直到用户输入一个”-”为止"><a href="#从键盘输入一些字符-并逐个把它们送到磁盘上去-直到用户输入一个”-”为止" class="headerlink" title="从键盘输入一些字符,并逐个把它们送到磁盘上去,直到用户输入一个”#”为止."></a>从键盘输入一些字符,并逐个把它们送到磁盘上去,直到用户输入一个”#”为止.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="type">char</span> ch, filename[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入所用的文件名:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, filename);</span><br><span class="line">    getchar();<span class="comment">//用来消化最后输入的回车符</span></span><br><span class="line">    <span class="keyword">if</span> ((fp = fopen(filename, <span class="string">&#x27;w&#x27;</span>) == <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;cannot open file\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);<span class="comment">//终止程序</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个准备存储到磁盘的字符串(以#结束):&quot;</span>);</span><br><span class="line">    ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch != <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        fputc(ch, fp);</span><br><span class="line">        <span class="built_in">putchar</span>(ch);</span><br><span class="line">        ch = getchar(); <span class="comment">//再接收从键盘输入的一个字符</span></span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">10</span>); <span class="comment">//向屏幕输出一个换行符s</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="将一个磁盘文件中的信息复制到另一个磁盘文件中"><a href="#将一个磁盘文件中的信息复制到另一个磁盘文件中" class="headerlink" title="将一个磁盘文件中的信息复制到另一个磁盘文件中"></a>将一个磁盘文件中的信息复制到另一个磁盘文件中</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE *in, *out;</span><br><span class="line">    <span class="type">char</span> ch, infile[<span class="number">10</span>], outfile[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入读入文件的名字:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, infile);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入输出文件的名字:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, outfile);</span><br><span class="line">    getchar(); <span class="comment">//用来消化最后输入的回车符</span></span><br><span class="line">    <span class="keyword">if</span> ((in = fopen(infile, <span class="string">&#x27;r&#x27;</span>) == <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;cannot open file\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((out = fopen(outfile, <span class="string">&#x27;w&#x27;</span>) == <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;cannot open file\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ch = fgetc(in);</span><br><span class="line">    <span class="keyword">while</span> (!feof(in)) <span class="comment">//如未遇到输入文件的结束标志</span></span><br><span class="line">    &#123;</span><br><span class="line">        fputc(ch, out);</span><br><span class="line">        <span class="built_in">putchar</span>(ch); <span class="comment">//显示在屏幕上</span></span><br><span class="line">        ch = fgetc(in);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">10</span>); <span class="comment">//显示完全部字符后换行</span></span><br><span class="line">    fclose(in);</span><br><span class="line">    fclose(out);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在访问磁盘文件时,是逐个字符(字节)进行的,为了知道当前访问到第几个字节,系统用”文件读写位置标记”来表示当前所访问的位置.开始时指向第1个字节,每访问完一个字节,当前读写位置就指向下一个字节.为了知道对文件的读写是否完成,只需看文件读写位置是否移到文件的末尾.</p>
<blockquote>
<p>feof函数可以检测文件是否已被读取过.</p>
</blockquote>
<h4 id="怎样向文件读写一个字符串"><a href="#怎样向文件读写一个字符串" class="headerlink" title="怎样向文件读写一个字符串"></a>怎样向文件读写一个字符串</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fgets(str,n,fp);</span><br></pre></td></tr></table></figure>

<p>作用是从fp所指向的文件中读入一个长度为n-1的字符串,并在最后加一个’\0’字符,然后把这n个字符存放到字符数组str中.</p>
<p><strong>读写一个字符串的函数</strong></p>
<table>
<thead>
<tr>
<th>函数名</th>
<th>调用形式</th>
<th>功能</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>fgets</td>
<td>fgets(str,n,fp)</td>
<td>从fp指向的文件读入一个长度为(n-1)的字符串,存放到字符数组str中.</td>
<td>读成功,返回地址str,失败则返回NULL</td>
</tr>
<tr>
<td>fputs</td>
<td>fputs(str,fp)</td>
<td>把str所指向的字符串写到文件指针变量fp所指向的文件中</td>
<td>输出成功,返回0;否则返回非0值</td>
</tr>
</tbody></table>
<p><strong>fgets函数的原型为：</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">fgets</span><span class="params">(<span class="type">char</span> * str,<span class="type">int</span> n,FILE *fp)</span>;</span><br></pre></td></tr></table></figure>

<p>作用是从文件读入一个字符串.调用时可以写成下面的形式:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fgets(str,n,fp)</span><br></pre></td></tr></table></figure>

<p>n是要求得到的字符个数,但实际上只从fp所指向的文件中读入n-1字符,然后在最后加一个’\0’字符,这样得到的字符串共有n个字符,把它们放到字符数组str中.</p>
<p>如果在读完n-1个字符之前遇到换行符’\n’或文件结束符EOF,读入即结束,但将所遇到的换行符”\n”也作为一个字符读入.执行成功返回值为str数组首元素的地址,如果一开始就遇到文件尾或读数据出错,则为NULL.</p>
<p><strong>fputs函数的原型为：</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">fputs</span><span class="params">(<span class="type">char</span> * str,FILE *fp)</span>;</span><br></pre></td></tr></table></figure>

<p>其作用是将str所指向的字符串输出到fp所指向的文件中.调用时可以写成下面的形式:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fputs</span>(<span class="string">&quot;China&quot;</span>,fp);</span><br></pre></td></tr></table></figure>

<p>第一个参数可以是字符串常量,字符数组名或字符型指针.字符串末尾的’\0’不输出.输出成功,函数值为0,不成功则为EOF(-1).</p>
<h5 id="从键盘读入若干个字符串-对它们按字母大小的顺序排序-然后把排好序的字符串送到磁盘文件中保存"><a href="#从键盘读入若干个字符串-对它们按字母大小的顺序排序-然后把排好序的字符串送到磁盘文件中保存" class="headerlink" title="从键盘读入若干个字符串,对它们按字母大小的顺序排序,然后把排好序的字符串送到磁盘文件中保存."></a>从键盘读入若干个字符串,对它们按字母大小的顺序排序,然后把排好序的字符串送到磁盘文件中保存.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">3</span>][<span class="number">10</span>], temp[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> i, j, k, n = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter strings:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        gets(str[i]);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) <span class="comment">//用选择法对字符串排序</span></span><br><span class="line">    &#123;</span><br><span class="line">        k = i;</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(str[k], str[j]) &gt; <span class="number">0</span>)</span><br><span class="line">                k = j;</span><br><span class="line">            <span class="keyword">if</span> (k != i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">strcpy</span>(temp, str[i]);</span><br><span class="line">                <span class="built_in">strcpy</span>(str[i], str[k]);</span><br><span class="line">                <span class="built_in">strcpy</span>(str[k], temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((fp = fopen(<span class="string">&quot;D:\\CC\\string.dat&quot;</span>, <span class="string">&quot;w&quot;</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;can&#x27;t open file!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nThe new sequence:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fputs</span>(str[i], fp);</span><br><span class="line">        <span class="built_in">fputs</span>(<span class="string">&quot;\n&quot;</span>, fp);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="用格式化的方式读写文本文件"><a href="#用格式化的方式读写文本文件" class="headerlink" title="用格式化的方式读写文本文件"></a>用格式化的方式读写文本文件</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fprintf</span>(文件指针,格式化字符串,输出表列);</span><br><span class="line"><span class="built_in">fscanf</span>(文件指针,格式化字符串,输入表列);<span class="comment">//从磁盘文件上读入ASCII字符</span></span><br><span class="line">---</span><br><span class="line"><span class="built_in">fprintf</span>(fp,<span class="string">&quot;%d,%6.2f&quot;</span>,i,f);</span><br></pre></td></tr></table></figure>

<p>因为在输入时要将文件中的ASCII码<strong>转换为二进制形式</strong>再保存在内存变量中,在输出时又要将内存中的二进制形式转换成字符,要花费更多的时间,因此,在内存与磁盘交换数据的情况下,最好不用fprintf和fscanf函数,而用fread和fwrite函数.</p>
<h4 id="用二进制方式向文件读写一组数据"><a href="#用二进制方式向文件读写一组数据" class="headerlink" title="用二进制方式向文件读写一组数据"></a>用二进制方式向文件读写一组数据</h4><p>允许用fread函数从文件读一个数据块,用fwrite函数向文件写一个数据块.在读写时以二进制形式进行的.在向磁盘写数据时,直接将内存中的一组数据<strong>原封不动,不加转换</strong>地复制到磁盘文件上,读入时也是将磁盘文件中若干字节的内容一批读入内存.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fread(buffer,size,count,fp);</span><br><span class="line">fwrite(buffer,size,count,fp);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>buffer:</p>
<ul>
<li>fread:用来存放从文件读入的数据的存储区的地址</li>
<li>fwrite:把此地址开始的存储区中的数据向文件输出(指起始地址)</li>
</ul>
<p>size：要读的每个数据块的字节数<br>count：要读的数据块的个数<br>fp：文件指针</p>
</blockquote>
<p>如:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fread(f,<span class="number">4</span>,<span class="number">10</span>,fp);</span><br><span class="line"><span class="comment">//f是一个float型数组名(代表数组首元素地址),从fp所指向的文件读入10个4个字节的数据,存储到数组f中</span></span><br></pre></td></tr></table></figure>

<p>fread或fwrite执行成功返回<strong>count</strong>(输入或输出数据项的个数).</p>
<h5 id="从键盘输入10个学生的有关数据-然后把它们转存到磁盘文件上"><a href="#从键盘输入10个学生的有关数据-然后把它们转存到磁盘文件上" class="headerlink" title="从键盘输入10个学生的有关数据,然后把它们转存到磁盘文件上."></a>从键盘输入10个学生的有关数据,然后把它们转存到磁盘文件上.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 10</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student_type</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span> addr[<span class="number">15</span>];</span><br><span class="line">&#125; stu[SIZE];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">save</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">if</span> ((fp = fopen(<span class="string">&quot;D:\\CC\\string.dat&quot;</span>, <span class="string">&quot;wb&quot;</span>)) == <span class="literal">NULL</span>)<span class="comment">//二进制文件</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;can&#x27;t open file!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; SIZE; i++)</span><br><span class="line">        <span class="keyword">if</span> ((fwrite(&amp;stu[i], <span class="keyword">sizeof</span>(<span class="keyword">struct</span> Student_type), <span class="number">1</span>, fp) != <span class="number">1</span>))</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;file write error!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter datas of student:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; SIZE; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %d %d %s&quot;</span>, stu[i].name, &amp;stu[i].num, &amp;stu[i].age, stu[i].addr);</span><br><span class="line">    save();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="文本文件和二进制文件"><a href="#文本文件和二进制文件" class="headerlink" title="文本文件和二进制文件"></a>文本文件和二进制文件</h4><ul>
<li><p>数据的存储方式</p>
<p>​    文本方式: 数据以字符方式(ASCII代码)存储到文件中.如整数12,送到文件时占2个字节,而不是4个字节.以文本方式保存的数据便于阅读</p>
<p>​    二进制方式:数据按在内存的存储状态原封不动地复制到文件.如整数12,送到文件时和内存中一样占4个字节.</p>
</li>
<li><p>文件的分类</p>
<p>​    文本文件(ASCII文件):文件全部为ASCII字符</p>
<p>​    二进制文件:按二进制方式把在内存中的数据复制到文件的,称为二进制文件,即映像文件.</p>
</li>
<li><p>文件的打开方式</p>
<p>​    文本方式: 不带b的方式,读写文件时<strong>对换行符进行转换</strong></p>
<p>​    文本方式: 带b的方式,读写文件时<strong>对换行符不进行转换</strong></p>
</li>
<li><p>文件读写函数</p>
<p>​    文本读写函数:用来向文本文件读写字符数据的函数(如fgetc,fgets,fputc,fputs,fscanf,fprintf等)</p>
<p>​    二进制读写函数:用来向二进制文件读写二进制数据的函数(如getw,putw,fread,fwrite等)</p>
</li>
</ul>
<hr>
<h2 id="随机读写数据文件"><a href="#随机读写数据文件" class="headerlink" title="随机读写数据文件"></a>随机读写数据文件</h2><h3 id="文件位置标记及其定位"><a href="#文件位置标记及其定位" class="headerlink" title="文件位置标记及其定位"></a>文件位置标记及其定位</h3><h4 id="文件位置标记"><a href="#文件位置标记" class="headerlink" title="文件位置标记"></a>文件位置标记</h4><p>文件位置标记用来指示”接下来要读写的下一个字符的位置”</p>
<h4 id="文件位置标记的定位"><a href="#文件位置标记的定位" class="headerlink" title="文件位置标记的定位"></a>文件位置标记的定位</h4><p>:one: 用rewind函数使文件位置标记指向开头.同时feof函数的值会回复为0(假).</p>
<h5 id="有一个磁盘文件-内有一些信息-要求第1次将它的内容显示在屏幕上-第2次把它复制到另一文件上"><a href="#有一个磁盘文件-内有一些信息-要求第1次将它的内容显示在屏幕上-第2次把它复制到另一文件上" class="headerlink" title="有一个磁盘文件,内有一些信息.要求第1次将它的内容显示在屏幕上,第2次把它复制到另一文件上."></a>有一个磁盘文件,内有一些信息.要求第1次将它的内容显示在屏幕上,第2次把它复制到另一文件上.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE *fp1, *fp2;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    fp1 = fopen(<span class="string">&quot;file1.dat&quot;</span>, <span class="string">&quot;r&quot;</span>); <span class="comment">//不含路径默认在源文件所在目录</span></span><br><span class="line">    fp2 = fopen(<span class="string">&quot;file2.dat&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    ch = getc(fp1);</span><br><span class="line">    <span class="keyword">while</span> (!feof(fp1)) <span class="comment">//或者 while(ch!=EOF)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(ch);</span><br><span class="line">        ch = getc(fp1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">    rewind(fp1);</span><br><span class="line">    ch = getc(fp1);</span><br><span class="line">    <span class="keyword">while</span> (!feof(fp1))</span><br><span class="line">    &#123;</span><br><span class="line">        fputc(ch, fp2);</span><br><span class="line">        ch = getc(fp1);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp1);</span><br><span class="line">    fclose(fp2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>:two:用fseek函数改变文件位置标记</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fseek(文件类型指针,位移量,起始点);</span><br></pre></td></tr></table></figure>

<p><strong>起始点:</strong></p>
<table>
<thead>
<tr>
<th>起始点</th>
<th>名字</th>
<th>用数字代表</th>
</tr>
</thead>
<tbody><tr>
<td>文件开始位置</td>
<td>SEEK_SET</td>
<td>0</td>
</tr>
<tr>
<td>文件当前位置</td>
<td>SEEK_CUR</td>
<td>1</td>
</tr>
<tr>
<td>文件末尾位置</td>
<td>SEEK_END</td>
<td>2</td>
</tr>
</tbody></table>
<p>位移量:以”起始点”为基点,应是long型数据(在数字的末尾加一个字母L,就表示是long型);</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fseek(fp,<span class="number">100L</span>,<span class="number">0</span>);<span class="comment">//将文件位置标记先前移到离文件开头100个字节处.</span></span><br></pre></td></tr></table></figure>

<p>:three:用ftell函数测定文件位置标记的当前位置.</p>
<p>函数得到流式文件中文件位置标记的当前位置.调用函数时出错(如不存在fp指向的文件),返回值为-1L.</p>
<h4 id="随机读写"><a href="#随机读写" class="headerlink" title="随机读写"></a>随机读写</h4><h5 id="在磁盘文件上存有10个学生的数据-要求将第1-3-5-7-9个学生数据输入计算机-并在屏幕上显示出来"><a href="#在磁盘文件上存有10个学生的数据-要求将第1-3-5-7-9个学生数据输入计算机-并在屏幕上显示出来" class="headerlink" title="在磁盘文件上存有10个学生的数据.要求将第1,3,5,7,9个学生数据输入计算机,并在屏幕上显示出来."></a>在磁盘文件上存有10个学生的数据.要求将第1,3,5,7,9个学生数据输入计算机,并在屏幕上显示出来.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student_type</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span> addr[<span class="number">15</span>];</span><br><span class="line">&#125; stu[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">if</span> ((fp = fopen(<span class="string">&quot;D:\\CC\\string.dat&quot;</span>, <span class="string">&quot;wb&quot;</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;can&#x27;t open file!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        fseek(fp, i * <span class="keyword">sizeof</span>(<span class="keyword">struct</span> Student_type), <span class="number">0</span>);</span><br><span class="line">        fread(&amp;stu[i], <span class="keyword">sizeof</span>(<span class="keyword">struct</span> Student_type), <span class="number">1</span>, fp);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%-10s %4d %4d %-15s\n&quot;</span>, stu[i].name, stu[i].num, stu[i].age, stu[i].addr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="文件读写的出错检测"><a href="#文件读写的出错检测" class="headerlink" title="文件读写的出错检测"></a>文件读写的出错检测</h2><p>检查输入输出函数调用时可能出现的错误.</p>
<p><strong>ferror函数</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ferror(fp);</span><br></pre></td></tr></table></figure>

<p>如果返回值为0,表示未出现错误.</p>
<p>如果返回一个非零值,表示出错.</p>
<blockquote>
<p>对同一个文件每一次调用输入输出函数,都会产生一个新的ferror函数值.因此在调用一个输入输出函数后立即检查ferror的值,否则信息会丢失.</p>
<p>在执行fopen函数时,ferror函数的初始值自动置为0.</p>
</blockquote>
<p><strong>clearerr函数</strong></p>
<p>使文件出错标记和文件结束标记置为0.</p>

    </div>

    
    
    

    <footer class="post-footer">
          

<div class="post-copyright">
<ul>
  <li class="post-copyright-author">
      <strong>Post author:  </strong>Kayleh
  </li>
  <li class="post-copyright-link">
      <strong>Post link: </strong>
      <a href="https://blog.kayleh.top/posts/file-input-and-output" title="file input and output">https://blog.kayleh.top/posts/file-input-and-output</a>
  </li>
  <li class="post-copyright-license">
      <strong>Copyright Notice:  </strong>All articles in this blog are licensed under <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzQuMC8="><i class="fab fa-fw fa-creative-commons"></i>BY-NC-SA</span> unless stating additionally.
  </li>
</ul>
</div>

          <div class="followme">
  <span>Welcome to my other publishing channels</span>

  <div class="social-list">

      <div class="social-item">
          <a target="_blank" class="social-link" href="/atom.xml">
            <span class="icon">
              <i class="fa fa-rss"></i>
            </span>

            <span class="label">RSS</span>
          </a>
      </div>
  </div>
</div>

          <div class="post-tags">
              <a href="/tags/C/" rel="tag"><i class="fa fa-tag"></i> C</a>
          </div>

        
  <div class="social-like a2a_kit a2a_kit_size_32 a2a_default_style">
    <a class="a2a_dd" target="_blank" rel="noopener" href="https://www.addtoany.com/share"></a>
      <a class="a2a_button_facebook"></a>
      <a class="a2a_button_twitter"></a>
  </div>

          <div class="post-nav">
            <div class="post-nav-item">
                <a href="/posts/users-create-data-types-themselves" rel="prev" title="users create data types themselves">
                  <i class="fa fa-angle-left"></i> users create data types themselves
                </a>
            </div>
            <div class="post-nav-item">
                <a href="/posts/Java-high-performance-and-high-concurrency-spike-system" rel="next" title="Java高性能高并发秒杀系统">
                  Java高性能高并发秒杀系统 <i class="fa fa-angle-right"></i>
                </a>
            </div>
          </div>
    </footer>
  </article>
</div>






    <div class="comments gitalk-container"></div>
</div>
  </main>

  <footer class="footer">
    <div class="footer-inner">

  <div class="copyright">
    &copy; 2019 – 
    <span itemprop="copyrightYear">2025</span>
    <span class="with-love">
      <i class="fa fa-heart"></i>
    </span>
    <span class="author" itemprop="copyrightHolder">true</span>
  </div>
<div class="busuanzi-count">
    <span class="post-meta-item" id="busuanzi_container_site_uv">
      <span class="post-meta-item-icon">
        <i class="fa fa-user"></i>
      </span>
      <span class="site-uv" title="Total Visitors">
        <span id="busuanzi_value_site_uv"></span>
      </span>
    </span>
    <span class="post-meta-item" id="busuanzi_container_site_pv">
      <span class="post-meta-item-icon">
        <i class="fa fa-eye"></i>
      </span>
      <span class="site-pv" title="Total Views">
        <span id="busuanzi_value_site_pv"></span>
      </span>
    </span>
</div>

    </div>
  </footer>

  
  <div class="toggle sidebar-toggle" role="button">
    <span class="toggle-line"></span>
    <span class="toggle-line"></span>
    <span class="toggle-line"></span>
  </div>
  <div class="sidebar-dimmer"></div>
  <div class="back-to-top" role="button" aria-label="Back to top">
    <i class="fa fa-arrow-up fa-lg"></i>
    <span>0%</span>
  </div>

<noscript>
  <div class="noscript-warning">Theme NexT works best with JavaScript enabled</div>
</noscript>


  
  <script size="300" alpha="0.6" zIndex="-1" src="https://cdnjs.cloudflare.com/ajax/libs/ribbon.js/1.0.2/ribbon.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js" integrity="sha256-XL2inqUJaslATFnHdJOi9GfQ60on8Wx1C2H8DYiN1xY=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/next-theme-pjax/0.6.0/pjax.min.js" integrity="sha256-vxLn1tSKWD4dqbMRyv940UYw4sXgMtYcK6reefzZrao=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/fancyapps-ui/5.0.31/fancybox/fancybox.umd.js" integrity="sha256-a+H7FYzJv6oU2hfsfDGM2Ohw/cR9v+hPfxHCLdmCrE8=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/medium-zoom/1.1.0/medium-zoom.min.js" integrity="sha256-ZgMyDAIYDYGxbcpJcfUnYwNevG/xi9OHKaR/8GK+jWc=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/lozad.js/1.16.0/lozad.min.js" integrity="sha256-mOFREFhqmHeQbXpK2lp4nA3qooVgACfh88fpJftLBbc=" crossorigin="anonymous"></script>
<script src="/js/comments.js"></script><script src="/js/utils.js"></script><script src="/js/motion.js"></script><script src="/js/sidebar.js"></script><script src="/js/next-boot.js"></script><script src="/js/pjax.js"></script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-generator-searchdb/1.4.1/search.js" integrity="sha256-1kfA5uHPf65M5cphT2dvymhkuyHPQp5A53EGZOnOLmc=" crossorigin="anonymous"></script>
<script src="/js/third-party/search/local-search.js"></script>
<script src="//code.tidio.co/dq5klo9ydptaxokj83vcwnusf63dogzr.js"></script>
<script src="/js/third-party/chat/tidio.js"></script>




  <script src="/js/third-party/fancybox.js"></script>

  <script src="/js/third-party/pace.js"></script>

  <script src="/js/third-party/addtoany.js"></script>

  
  <script data-pjax async src="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"></script>




  

  <script class="next-config" data-name="enableMath" type="application/json">false</script><script class="next-config" data-name="mathjax" type="application/json">{"enable":true,"tags":"ams","js":{"url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.2.2/es5/tex-mml-chtml.js","integrity":"sha256-MASABpB4tYktI2Oitl4t+78w/lyA+D7b/s9GEP0JOGI="}}</script>
<script src="/js/third-party/math/mathjax.js"></script>


<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/gitalk/1.8.0/gitalk.css" integrity="sha256-AJnUHL7dBv6PGaeyPQJcgQPDjt/Hn/PvYZde1iqfp8U=" crossorigin="anonymous">

<script class="next-config" data-name="gitalk" type="application/json">{"enable":true,"github_id":"Kayleh","repo":"kayleh.top.giscus","client_id":"Ov23liJZlhhVSuSynF9Q","client_secret":"d16c7023956f130d20927ad469dfe83295864094","admin_user":"Kayleh","distraction_free_mode":true,"proxy":"https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token","language":null,"js":{"url":"https://cdnjs.cloudflare.com/ajax/libs/gitalk/1.8.0/gitalk.min.js","integrity":"sha256-MVK9MGD/XJaGyIghSVrONSnoXoGh3IFxLw0zfvzpxR4="},"path_md5":"94fa85d8db5716300306a73ed2c21374"}</script>
<script src="/js/third-party/comments/gitalk.js"></script>

</body>
</html>
